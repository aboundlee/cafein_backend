module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBusy {
  count: Int!
}

type AggregateCafe {
  count: Int!
}

type AggregateEnvironmentSurvey {
  count: Int!
}

type AggregateOpeningHours {
  count: Int!
}

type AggregateTextReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Busy {
  id: ID!
  cafe: Cafe!
  cafeId: ID
  dayOfTheWeek: String!
  time: String!
  busyness: String!
}

type BusyConnection {
  pageInfo: PageInfo!
  edges: [BusyEdge]!
  aggregate: AggregateBusy!
}

input BusyCreateInput {
  id: ID
  cafe: CafeCreateOneWithoutBusyInput!
  cafeId: ID
  dayOfTheWeek: String!
  time: String!
  busyness: String!
}

input BusyCreateManyWithoutCafeInput {
  create: [BusyCreateWithoutCafeInput!]
  connect: [BusyWhereUniqueInput!]
}

input BusyCreateWithoutCafeInput {
  id: ID
  cafeId: ID
  dayOfTheWeek: String!
  time: String!
  busyness: String!
}

type BusyEdge {
  node: Busy!
  cursor: String!
}

enum BusyOrderByInput {
  id_ASC
  id_DESC
  cafeId_ASC
  cafeId_DESC
  dayOfTheWeek_ASC
  dayOfTheWeek_DESC
  time_ASC
  time_DESC
  busyness_ASC
  busyness_DESC
}

type BusyPreviousValues {
  id: ID!
  cafeId: ID
  dayOfTheWeek: String!
  time: String!
  busyness: String!
}

input BusyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  dayOfTheWeek: String
  dayOfTheWeek_not: String
  dayOfTheWeek_in: [String!]
  dayOfTheWeek_not_in: [String!]
  dayOfTheWeek_lt: String
  dayOfTheWeek_lte: String
  dayOfTheWeek_gt: String
  dayOfTheWeek_gte: String
  dayOfTheWeek_contains: String
  dayOfTheWeek_not_contains: String
  dayOfTheWeek_starts_with: String
  dayOfTheWeek_not_starts_with: String
  dayOfTheWeek_ends_with: String
  dayOfTheWeek_not_ends_with: String
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  busyness: String
  busyness_not: String
  busyness_in: [String!]
  busyness_not_in: [String!]
  busyness_lt: String
  busyness_lte: String
  busyness_gt: String
  busyness_gte: String
  busyness_contains: String
  busyness_not_contains: String
  busyness_starts_with: String
  busyness_not_starts_with: String
  busyness_ends_with: String
  busyness_not_ends_with: String
  AND: [BusyScalarWhereInput!]
  OR: [BusyScalarWhereInput!]
  NOT: [BusyScalarWhereInput!]
}

type BusySubscriptionPayload {
  mutation: MutationType!
  node: Busy
  updatedFields: [String!]
  previousValues: BusyPreviousValues
}

input BusySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BusyWhereInput
  AND: [BusySubscriptionWhereInput!]
  OR: [BusySubscriptionWhereInput!]
  NOT: [BusySubscriptionWhereInput!]
}

input BusyUpdateInput {
  cafe: CafeUpdateOneRequiredWithoutBusyInput
  cafeId: ID
  dayOfTheWeek: String
  time: String
  busyness: String
}

input BusyUpdateManyDataInput {
  cafeId: ID
  dayOfTheWeek: String
  time: String
  busyness: String
}

input BusyUpdateManyMutationInput {
  cafeId: ID
  dayOfTheWeek: String
  time: String
  busyness: String
}

input BusyUpdateManyWithoutCafeInput {
  create: [BusyCreateWithoutCafeInput!]
  delete: [BusyWhereUniqueInput!]
  connect: [BusyWhereUniqueInput!]
  set: [BusyWhereUniqueInput!]
  disconnect: [BusyWhereUniqueInput!]
  update: [BusyUpdateWithWhereUniqueWithoutCafeInput!]
  upsert: [BusyUpsertWithWhereUniqueWithoutCafeInput!]
  deleteMany: [BusyScalarWhereInput!]
  updateMany: [BusyUpdateManyWithWhereNestedInput!]
}

input BusyUpdateManyWithWhereNestedInput {
  where: BusyScalarWhereInput!
  data: BusyUpdateManyDataInput!
}

input BusyUpdateWithoutCafeDataInput {
  cafeId: ID
  dayOfTheWeek: String
  time: String
  busyness: String
}

input BusyUpdateWithWhereUniqueWithoutCafeInput {
  where: BusyWhereUniqueInput!
  data: BusyUpdateWithoutCafeDataInput!
}

input BusyUpsertWithWhereUniqueWithoutCafeInput {
  where: BusyWhereUniqueInput!
  update: BusyUpdateWithoutCafeDataInput!
  create: BusyCreateWithoutCafeInput!
}

input BusyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafe: CafeWhereInput
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  dayOfTheWeek: String
  dayOfTheWeek_not: String
  dayOfTheWeek_in: [String!]
  dayOfTheWeek_not_in: [String!]
  dayOfTheWeek_lt: String
  dayOfTheWeek_lte: String
  dayOfTheWeek_gt: String
  dayOfTheWeek_gte: String
  dayOfTheWeek_contains: String
  dayOfTheWeek_not_contains: String
  dayOfTheWeek_starts_with: String
  dayOfTheWeek_not_starts_with: String
  dayOfTheWeek_ends_with: String
  dayOfTheWeek_not_ends_with: String
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  busyness: String
  busyness_not: String
  busyness_in: [String!]
  busyness_not_in: [String!]
  busyness_lt: String
  busyness_lte: String
  busyness_gt: String
  busyness_gte: String
  busyness_contains: String
  busyness_not_contains: String
  busyness_starts_with: String
  busyness_not_starts_with: String
  busyness_ends_with: String
  busyness_not_ends_with: String
  AND: [BusyWhereInput!]
  OR: [BusyWhereInput!]
  NOT: [BusyWhereInput!]
}

input BusyWhereUniqueInput {
  id: ID
}

type Cafe {
  id: ID!
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  createdAt: DateTime!
  openingHours(where: OpeningHoursWhereInput, orderBy: OpeningHoursOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpeningHours!]
  busy(where: BusyWhereInput, orderBy: BusyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Busy!]
  environmentSurvey(where: EnvironmentSurveyWhereInput, orderBy: EnvironmentSurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EnvironmentSurvey!]
  textReview(where: TextReviewWhereInput, orderBy: TextReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextReview!]
}

type CafeConnection {
  pageInfo: PageInfo!
  edges: [CafeEdge]!
  aggregate: AggregateCafe!
}

input CafeCreateInput {
  id: ID
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  openingHours: OpeningHoursCreateManyWithoutCafeInput
  busy: BusyCreateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyCreateManyWithoutCafeInput
  textReview: TextReviewCreateManyWithoutCafeInput
}

input CafeCreateOneWithoutBusyInput {
  create: CafeCreateWithoutBusyInput
  connect: CafeWhereUniqueInput
}

input CafeCreateOneWithoutEnvironmentSurveyInput {
  create: CafeCreateWithoutEnvironmentSurveyInput
  connect: CafeWhereUniqueInput
}

input CafeCreateOneWithoutOpeningHoursInput {
  create: CafeCreateWithoutOpeningHoursInput
  connect: CafeWhereUniqueInput
}

input CafeCreateOneWithoutTextReviewInput {
  create: CafeCreateWithoutTextReviewInput
  connect: CafeWhereUniqueInput
}

input CafeCreateWithoutBusyInput {
  id: ID
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  openingHours: OpeningHoursCreateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyCreateManyWithoutCafeInput
  textReview: TextReviewCreateManyWithoutCafeInput
}

input CafeCreateWithoutEnvironmentSurveyInput {
  id: ID
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  openingHours: OpeningHoursCreateManyWithoutCafeInput
  busy: BusyCreateManyWithoutCafeInput
  textReview: TextReviewCreateManyWithoutCafeInput
}

input CafeCreateWithoutOpeningHoursInput {
  id: ID
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  busy: BusyCreateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyCreateManyWithoutCafeInput
  textReview: TextReviewCreateManyWithoutCafeInput
}

input CafeCreateWithoutTextReviewInput {
  id: ID
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  openingHours: OpeningHoursCreateManyWithoutCafeInput
  busy: BusyCreateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyCreateManyWithoutCafeInput
}

type CafeEdge {
  node: Cafe!
  cursor: String!
}

enum CafeOrderByInput {
  id_ASC
  id_DESC
  cafename_ASC
  cafename_DESC
  address_ASC
  address_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  franchise_ASC
  franchise_DESC
  createdAt_ASC
  createdAt_DESC
}

type CafePreviousValues {
  id: ID!
  cafename: String!
  address: String!
  lat: String!
  lng: String!
  franchise: String
  createdAt: DateTime!
}

type CafeSubscriptionPayload {
  mutation: MutationType!
  node: Cafe
  updatedFields: [String!]
  previousValues: CafePreviousValues
}

input CafeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CafeWhereInput
  AND: [CafeSubscriptionWhereInput!]
  OR: [CafeSubscriptionWhereInput!]
  NOT: [CafeSubscriptionWhereInput!]
}

input CafeUpdateInput {
  cafename: String
  address: String
  lat: String
  lng: String
  franchise: String
  openingHours: OpeningHoursUpdateManyWithoutCafeInput
  busy: BusyUpdateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyUpdateManyWithoutCafeInput
  textReview: TextReviewUpdateManyWithoutCafeInput
}

input CafeUpdateManyMutationInput {
  cafename: String
  address: String
  lat: String
  lng: String
  franchise: String
}

input CafeUpdateOneRequiredWithoutBusyInput {
  create: CafeCreateWithoutBusyInput
  update: CafeUpdateWithoutBusyDataInput
  upsert: CafeUpsertWithoutBusyInput
  connect: CafeWhereUniqueInput
}

input CafeUpdateOneRequiredWithoutEnvironmentSurveyInput {
  create: CafeCreateWithoutEnvironmentSurveyInput
  update: CafeUpdateWithoutEnvironmentSurveyDataInput
  upsert: CafeUpsertWithoutEnvironmentSurveyInput
  connect: CafeWhereUniqueInput
}

input CafeUpdateOneRequiredWithoutOpeningHoursInput {
  create: CafeCreateWithoutOpeningHoursInput
  update: CafeUpdateWithoutOpeningHoursDataInput
  upsert: CafeUpsertWithoutOpeningHoursInput
  connect: CafeWhereUniqueInput
}

input CafeUpdateOneRequiredWithoutTextReviewInput {
  create: CafeCreateWithoutTextReviewInput
  update: CafeUpdateWithoutTextReviewDataInput
  upsert: CafeUpsertWithoutTextReviewInput
  connect: CafeWhereUniqueInput
}

input CafeUpdateWithoutBusyDataInput {
  cafename: String
  address: String
  lat: String
  lng: String
  franchise: String
  openingHours: OpeningHoursUpdateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyUpdateManyWithoutCafeInput
  textReview: TextReviewUpdateManyWithoutCafeInput
}

input CafeUpdateWithoutEnvironmentSurveyDataInput {
  cafename: String
  address: String
  lat: String
  lng: String
  franchise: String
  openingHours: OpeningHoursUpdateManyWithoutCafeInput
  busy: BusyUpdateManyWithoutCafeInput
  textReview: TextReviewUpdateManyWithoutCafeInput
}

input CafeUpdateWithoutOpeningHoursDataInput {
  cafename: String
  address: String
  lat: String
  lng: String
  franchise: String
  busy: BusyUpdateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyUpdateManyWithoutCafeInput
  textReview: TextReviewUpdateManyWithoutCafeInput
}

input CafeUpdateWithoutTextReviewDataInput {
  cafename: String
  address: String
  lat: String
  lng: String
  franchise: String
  openingHours: OpeningHoursUpdateManyWithoutCafeInput
  busy: BusyUpdateManyWithoutCafeInput
  environmentSurvey: EnvironmentSurveyUpdateManyWithoutCafeInput
}

input CafeUpsertWithoutBusyInput {
  update: CafeUpdateWithoutBusyDataInput!
  create: CafeCreateWithoutBusyInput!
}

input CafeUpsertWithoutEnvironmentSurveyInput {
  update: CafeUpdateWithoutEnvironmentSurveyDataInput!
  create: CafeCreateWithoutEnvironmentSurveyInput!
}

input CafeUpsertWithoutOpeningHoursInput {
  update: CafeUpdateWithoutOpeningHoursDataInput!
  create: CafeCreateWithoutOpeningHoursInput!
}

input CafeUpsertWithoutTextReviewInput {
  update: CafeUpdateWithoutTextReviewDataInput!
  create: CafeCreateWithoutTextReviewInput!
}

input CafeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafename: String
  cafename_not: String
  cafename_in: [String!]
  cafename_not_in: [String!]
  cafename_lt: String
  cafename_lte: String
  cafename_gt: String
  cafename_gte: String
  cafename_contains: String
  cafename_not_contains: String
  cafename_starts_with: String
  cafename_not_starts_with: String
  cafename_ends_with: String
  cafename_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  lat: String
  lat_not: String
  lat_in: [String!]
  lat_not_in: [String!]
  lat_lt: String
  lat_lte: String
  lat_gt: String
  lat_gte: String
  lat_contains: String
  lat_not_contains: String
  lat_starts_with: String
  lat_not_starts_with: String
  lat_ends_with: String
  lat_not_ends_with: String
  lng: String
  lng_not: String
  lng_in: [String!]
  lng_not_in: [String!]
  lng_lt: String
  lng_lte: String
  lng_gt: String
  lng_gte: String
  lng_contains: String
  lng_not_contains: String
  lng_starts_with: String
  lng_not_starts_with: String
  lng_ends_with: String
  lng_not_ends_with: String
  franchise: String
  franchise_not: String
  franchise_in: [String!]
  franchise_not_in: [String!]
  franchise_lt: String
  franchise_lte: String
  franchise_gt: String
  franchise_gte: String
  franchise_contains: String
  franchise_not_contains: String
  franchise_starts_with: String
  franchise_not_starts_with: String
  franchise_ends_with: String
  franchise_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  openingHours_every: OpeningHoursWhereInput
  openingHours_some: OpeningHoursWhereInput
  openingHours_none: OpeningHoursWhereInput
  busy_every: BusyWhereInput
  busy_some: BusyWhereInput
  busy_none: BusyWhereInput
  environmentSurvey_every: EnvironmentSurveyWhereInput
  environmentSurvey_some: EnvironmentSurveyWhereInput
  environmentSurvey_none: EnvironmentSurveyWhereInput
  textReview_every: TextReviewWhereInput
  textReview_some: TextReviewWhereInput
  textReview_none: TextReviewWhereInput
  AND: [CafeWhereInput!]
  OR: [CafeWhereInput!]
  NOT: [CafeWhereInput!]
}

input CafeWhereUniqueInput {
  id: ID
}

scalar DateTime

type EnvironmentSurvey {
  id: ID!
  cafe: Cafe!
  cafeId: ID
  user: User!
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
  createdAt: DateTime!
}

type EnvironmentSurveyConnection {
  pageInfo: PageInfo!
  edges: [EnvironmentSurveyEdge]!
  aggregate: AggregateEnvironmentSurvey!
}

input EnvironmentSurveyCreateInput {
  id: ID
  cafe: CafeCreateOneWithoutEnvironmentSurveyInput!
  cafeId: ID
  user: UserCreateOneWithoutEnvironmentSurveyInput!
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyCreateManyWithoutCafeInput {
  create: [EnvironmentSurveyCreateWithoutCafeInput!]
  connect: [EnvironmentSurveyWhereUniqueInput!]
}

input EnvironmentSurveyCreateManyWithoutUserInput {
  create: [EnvironmentSurveyCreateWithoutUserInput!]
  connect: [EnvironmentSurveyWhereUniqueInput!]
}

input EnvironmentSurveyCreateWithoutCafeInput {
  id: ID
  cafeId: ID
  user: UserCreateOneWithoutEnvironmentSurveyInput!
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyCreateWithoutUserInput {
  id: ID
  cafe: CafeCreateOneWithoutEnvironmentSurveyInput!
  cafeId: ID
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

type EnvironmentSurveyEdge {
  node: EnvironmentSurvey!
  cursor: String!
}

enum EnvironmentSurveyOrderByInput {
  id_ASC
  id_DESC
  cafeId_ASC
  cafeId_DESC
  userId_ASC
  userId_DESC
  loudness_ASC
  loudness_DESC
  cafeSize_ASC
  cafeSize_DESC
  plugin_ASC
  plugin_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnvironmentSurveyPreviousValues {
  id: ID!
  cafeId: ID
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
  createdAt: DateTime!
}

input EnvironmentSurveyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  loudness: String
  loudness_not: String
  loudness_in: [String!]
  loudness_not_in: [String!]
  loudness_lt: String
  loudness_lte: String
  loudness_gt: String
  loudness_gte: String
  loudness_contains: String
  loudness_not_contains: String
  loudness_starts_with: String
  loudness_not_starts_with: String
  loudness_ends_with: String
  loudness_not_ends_with: String
  cafeSize: String
  cafeSize_not: String
  cafeSize_in: [String!]
  cafeSize_not_in: [String!]
  cafeSize_lt: String
  cafeSize_lte: String
  cafeSize_gt: String
  cafeSize_gte: String
  cafeSize_contains: String
  cafeSize_not_contains: String
  cafeSize_starts_with: String
  cafeSize_not_starts_with: String
  cafeSize_ends_with: String
  cafeSize_not_ends_with: String
  plugin: String
  plugin_not: String
  plugin_in: [String!]
  plugin_not_in: [String!]
  plugin_lt: String
  plugin_lte: String
  plugin_gt: String
  plugin_gte: String
  plugin_contains: String
  plugin_not_contains: String
  plugin_starts_with: String
  plugin_not_starts_with: String
  plugin_ends_with: String
  plugin_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EnvironmentSurveyScalarWhereInput!]
  OR: [EnvironmentSurveyScalarWhereInput!]
  NOT: [EnvironmentSurveyScalarWhereInput!]
}

type EnvironmentSurveySubscriptionPayload {
  mutation: MutationType!
  node: EnvironmentSurvey
  updatedFields: [String!]
  previousValues: EnvironmentSurveyPreviousValues
}

input EnvironmentSurveySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EnvironmentSurveyWhereInput
  AND: [EnvironmentSurveySubscriptionWhereInput!]
  OR: [EnvironmentSurveySubscriptionWhereInput!]
  NOT: [EnvironmentSurveySubscriptionWhereInput!]
}

input EnvironmentSurveyUpdateInput {
  cafe: CafeUpdateOneRequiredWithoutEnvironmentSurveyInput
  cafeId: ID
  user: UserUpdateOneRequiredWithoutEnvironmentSurveyInput
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyUpdateManyDataInput {
  cafeId: ID
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyUpdateManyMutationInput {
  cafeId: ID
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyUpdateManyWithoutCafeInput {
  create: [EnvironmentSurveyCreateWithoutCafeInput!]
  delete: [EnvironmentSurveyWhereUniqueInput!]
  connect: [EnvironmentSurveyWhereUniqueInput!]
  set: [EnvironmentSurveyWhereUniqueInput!]
  disconnect: [EnvironmentSurveyWhereUniqueInput!]
  update: [EnvironmentSurveyUpdateWithWhereUniqueWithoutCafeInput!]
  upsert: [EnvironmentSurveyUpsertWithWhereUniqueWithoutCafeInput!]
  deleteMany: [EnvironmentSurveyScalarWhereInput!]
  updateMany: [EnvironmentSurveyUpdateManyWithWhereNestedInput!]
}

input EnvironmentSurveyUpdateManyWithoutUserInput {
  create: [EnvironmentSurveyCreateWithoutUserInput!]
  delete: [EnvironmentSurveyWhereUniqueInput!]
  connect: [EnvironmentSurveyWhereUniqueInput!]
  set: [EnvironmentSurveyWhereUniqueInput!]
  disconnect: [EnvironmentSurveyWhereUniqueInput!]
  update: [EnvironmentSurveyUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EnvironmentSurveyUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [EnvironmentSurveyScalarWhereInput!]
  updateMany: [EnvironmentSurveyUpdateManyWithWhereNestedInput!]
}

input EnvironmentSurveyUpdateManyWithWhereNestedInput {
  where: EnvironmentSurveyScalarWhereInput!
  data: EnvironmentSurveyUpdateManyDataInput!
}

input EnvironmentSurveyUpdateWithoutCafeDataInput {
  cafeId: ID
  user: UserUpdateOneRequiredWithoutEnvironmentSurveyInput
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyUpdateWithoutUserDataInput {
  cafe: CafeUpdateOneRequiredWithoutEnvironmentSurveyInput
  cafeId: ID
  userId: ID
  loudness: String
  cafeSize: String
  plugin: String
}

input EnvironmentSurveyUpdateWithWhereUniqueWithoutCafeInput {
  where: EnvironmentSurveyWhereUniqueInput!
  data: EnvironmentSurveyUpdateWithoutCafeDataInput!
}

input EnvironmentSurveyUpdateWithWhereUniqueWithoutUserInput {
  where: EnvironmentSurveyWhereUniqueInput!
  data: EnvironmentSurveyUpdateWithoutUserDataInput!
}

input EnvironmentSurveyUpsertWithWhereUniqueWithoutCafeInput {
  where: EnvironmentSurveyWhereUniqueInput!
  update: EnvironmentSurveyUpdateWithoutCafeDataInput!
  create: EnvironmentSurveyCreateWithoutCafeInput!
}

input EnvironmentSurveyUpsertWithWhereUniqueWithoutUserInput {
  where: EnvironmentSurveyWhereUniqueInput!
  update: EnvironmentSurveyUpdateWithoutUserDataInput!
  create: EnvironmentSurveyCreateWithoutUserInput!
}

input EnvironmentSurveyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafe: CafeWhereInput
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  user: UserWhereInput
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  loudness: String
  loudness_not: String
  loudness_in: [String!]
  loudness_not_in: [String!]
  loudness_lt: String
  loudness_lte: String
  loudness_gt: String
  loudness_gte: String
  loudness_contains: String
  loudness_not_contains: String
  loudness_starts_with: String
  loudness_not_starts_with: String
  loudness_ends_with: String
  loudness_not_ends_with: String
  cafeSize: String
  cafeSize_not: String
  cafeSize_in: [String!]
  cafeSize_not_in: [String!]
  cafeSize_lt: String
  cafeSize_lte: String
  cafeSize_gt: String
  cafeSize_gte: String
  cafeSize_contains: String
  cafeSize_not_contains: String
  cafeSize_starts_with: String
  cafeSize_not_starts_with: String
  cafeSize_ends_with: String
  cafeSize_not_ends_with: String
  plugin: String
  plugin_not: String
  plugin_in: [String!]
  plugin_not_in: [String!]
  plugin_lt: String
  plugin_lte: String
  plugin_gt: String
  plugin_gte: String
  plugin_contains: String
  plugin_not_contains: String
  plugin_starts_with: String
  plugin_not_starts_with: String
  plugin_ends_with: String
  plugin_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EnvironmentSurveyWhereInput!]
  OR: [EnvironmentSurveyWhereInput!]
  NOT: [EnvironmentSurveyWhereInput!]
}

input EnvironmentSurveyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBusy(data: BusyCreateInput!): Busy!
  updateBusy(data: BusyUpdateInput!, where: BusyWhereUniqueInput!): Busy
  updateManyBusies(data: BusyUpdateManyMutationInput!, where: BusyWhereInput): BatchPayload!
  upsertBusy(where: BusyWhereUniqueInput!, create: BusyCreateInput!, update: BusyUpdateInput!): Busy!
  deleteBusy(where: BusyWhereUniqueInput!): Busy
  deleteManyBusies(where: BusyWhereInput): BatchPayload!
  createCafe(data: CafeCreateInput!): Cafe!
  updateCafe(data: CafeUpdateInput!, where: CafeWhereUniqueInput!): Cafe
  updateManyCafes(data: CafeUpdateManyMutationInput!, where: CafeWhereInput): BatchPayload!
  upsertCafe(where: CafeWhereUniqueInput!, create: CafeCreateInput!, update: CafeUpdateInput!): Cafe!
  deleteCafe(where: CafeWhereUniqueInput!): Cafe
  deleteManyCafes(where: CafeWhereInput): BatchPayload!
  createEnvironmentSurvey(data: EnvironmentSurveyCreateInput!): EnvironmentSurvey!
  updateEnvironmentSurvey(data: EnvironmentSurveyUpdateInput!, where: EnvironmentSurveyWhereUniqueInput!): EnvironmentSurvey
  updateManyEnvironmentSurveys(data: EnvironmentSurveyUpdateManyMutationInput!, where: EnvironmentSurveyWhereInput): BatchPayload!
  upsertEnvironmentSurvey(where: EnvironmentSurveyWhereUniqueInput!, create: EnvironmentSurveyCreateInput!, update: EnvironmentSurveyUpdateInput!): EnvironmentSurvey!
  deleteEnvironmentSurvey(where: EnvironmentSurveyWhereUniqueInput!): EnvironmentSurvey
  deleteManyEnvironmentSurveys(where: EnvironmentSurveyWhereInput): BatchPayload!
  createOpeningHours(data: OpeningHoursCreateInput!): OpeningHours!
  updateOpeningHours(data: OpeningHoursUpdateInput!, where: OpeningHoursWhereUniqueInput!): OpeningHours
  updateManyOpeningHourses(data: OpeningHoursUpdateManyMutationInput!, where: OpeningHoursWhereInput): BatchPayload!
  upsertOpeningHours(where: OpeningHoursWhereUniqueInput!, create: OpeningHoursCreateInput!, update: OpeningHoursUpdateInput!): OpeningHours!
  deleteOpeningHours(where: OpeningHoursWhereUniqueInput!): OpeningHours
  deleteManyOpeningHourses(where: OpeningHoursWhereInput): BatchPayload!
  createTextReview(data: TextReviewCreateInput!): TextReview!
  updateTextReview(data: TextReviewUpdateInput!, where: TextReviewWhereUniqueInput!): TextReview
  updateManyTextReviews(data: TextReviewUpdateManyMutationInput!, where: TextReviewWhereInput): BatchPayload!
  upsertTextReview(where: TextReviewWhereUniqueInput!, create: TextReviewCreateInput!, update: TextReviewUpdateInput!): TextReview!
  deleteTextReview(where: TextReviewWhereUniqueInput!): TextReview
  deleteManyTextReviews(where: TextReviewWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OpeningHours {
  id: ID!
  cafe: Cafe!
  cafeId: ID
  dayOfTheWeek: String!
  open: String!
  close: String!
}

type OpeningHoursConnection {
  pageInfo: PageInfo!
  edges: [OpeningHoursEdge]!
  aggregate: AggregateOpeningHours!
}

input OpeningHoursCreateInput {
  id: ID
  cafe: CafeCreateOneWithoutOpeningHoursInput!
  cafeId: ID
  dayOfTheWeek: String!
  open: String!
  close: String!
}

input OpeningHoursCreateManyWithoutCafeInput {
  create: [OpeningHoursCreateWithoutCafeInput!]
  connect: [OpeningHoursWhereUniqueInput!]
}

input OpeningHoursCreateWithoutCafeInput {
  id: ID
  cafeId: ID
  dayOfTheWeek: String!
  open: String!
  close: String!
}

type OpeningHoursEdge {
  node: OpeningHours!
  cursor: String!
}

enum OpeningHoursOrderByInput {
  id_ASC
  id_DESC
  cafeId_ASC
  cafeId_DESC
  dayOfTheWeek_ASC
  dayOfTheWeek_DESC
  open_ASC
  open_DESC
  close_ASC
  close_DESC
}

type OpeningHoursPreviousValues {
  id: ID!
  cafeId: ID
  dayOfTheWeek: String!
  open: String!
  close: String!
}

input OpeningHoursScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  dayOfTheWeek: String
  dayOfTheWeek_not: String
  dayOfTheWeek_in: [String!]
  dayOfTheWeek_not_in: [String!]
  dayOfTheWeek_lt: String
  dayOfTheWeek_lte: String
  dayOfTheWeek_gt: String
  dayOfTheWeek_gte: String
  dayOfTheWeek_contains: String
  dayOfTheWeek_not_contains: String
  dayOfTheWeek_starts_with: String
  dayOfTheWeek_not_starts_with: String
  dayOfTheWeek_ends_with: String
  dayOfTheWeek_not_ends_with: String
  open: String
  open_not: String
  open_in: [String!]
  open_not_in: [String!]
  open_lt: String
  open_lte: String
  open_gt: String
  open_gte: String
  open_contains: String
  open_not_contains: String
  open_starts_with: String
  open_not_starts_with: String
  open_ends_with: String
  open_not_ends_with: String
  close: String
  close_not: String
  close_in: [String!]
  close_not_in: [String!]
  close_lt: String
  close_lte: String
  close_gt: String
  close_gte: String
  close_contains: String
  close_not_contains: String
  close_starts_with: String
  close_not_starts_with: String
  close_ends_with: String
  close_not_ends_with: String
  AND: [OpeningHoursScalarWhereInput!]
  OR: [OpeningHoursScalarWhereInput!]
  NOT: [OpeningHoursScalarWhereInput!]
}

type OpeningHoursSubscriptionPayload {
  mutation: MutationType!
  node: OpeningHours
  updatedFields: [String!]
  previousValues: OpeningHoursPreviousValues
}

input OpeningHoursSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OpeningHoursWhereInput
  AND: [OpeningHoursSubscriptionWhereInput!]
  OR: [OpeningHoursSubscriptionWhereInput!]
  NOT: [OpeningHoursSubscriptionWhereInput!]
}

input OpeningHoursUpdateInput {
  cafe: CafeUpdateOneRequiredWithoutOpeningHoursInput
  cafeId: ID
  dayOfTheWeek: String
  open: String
  close: String
}

input OpeningHoursUpdateManyDataInput {
  cafeId: ID
  dayOfTheWeek: String
  open: String
  close: String
}

input OpeningHoursUpdateManyMutationInput {
  cafeId: ID
  dayOfTheWeek: String
  open: String
  close: String
}

input OpeningHoursUpdateManyWithoutCafeInput {
  create: [OpeningHoursCreateWithoutCafeInput!]
  delete: [OpeningHoursWhereUniqueInput!]
  connect: [OpeningHoursWhereUniqueInput!]
  set: [OpeningHoursWhereUniqueInput!]
  disconnect: [OpeningHoursWhereUniqueInput!]
  update: [OpeningHoursUpdateWithWhereUniqueWithoutCafeInput!]
  upsert: [OpeningHoursUpsertWithWhereUniqueWithoutCafeInput!]
  deleteMany: [OpeningHoursScalarWhereInput!]
  updateMany: [OpeningHoursUpdateManyWithWhereNestedInput!]
}

input OpeningHoursUpdateManyWithWhereNestedInput {
  where: OpeningHoursScalarWhereInput!
  data: OpeningHoursUpdateManyDataInput!
}

input OpeningHoursUpdateWithoutCafeDataInput {
  cafeId: ID
  dayOfTheWeek: String
  open: String
  close: String
}

input OpeningHoursUpdateWithWhereUniqueWithoutCafeInput {
  where: OpeningHoursWhereUniqueInput!
  data: OpeningHoursUpdateWithoutCafeDataInput!
}

input OpeningHoursUpsertWithWhereUniqueWithoutCafeInput {
  where: OpeningHoursWhereUniqueInput!
  update: OpeningHoursUpdateWithoutCafeDataInput!
  create: OpeningHoursCreateWithoutCafeInput!
}

input OpeningHoursWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafe: CafeWhereInput
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  dayOfTheWeek: String
  dayOfTheWeek_not: String
  dayOfTheWeek_in: [String!]
  dayOfTheWeek_not_in: [String!]
  dayOfTheWeek_lt: String
  dayOfTheWeek_lte: String
  dayOfTheWeek_gt: String
  dayOfTheWeek_gte: String
  dayOfTheWeek_contains: String
  dayOfTheWeek_not_contains: String
  dayOfTheWeek_starts_with: String
  dayOfTheWeek_not_starts_with: String
  dayOfTheWeek_ends_with: String
  dayOfTheWeek_not_ends_with: String
  open: String
  open_not: String
  open_in: [String!]
  open_not_in: [String!]
  open_lt: String
  open_lte: String
  open_gt: String
  open_gte: String
  open_contains: String
  open_not_contains: String
  open_starts_with: String
  open_not_starts_with: String
  open_ends_with: String
  open_not_ends_with: String
  close: String
  close_not: String
  close_in: [String!]
  close_not_in: [String!]
  close_lt: String
  close_lte: String
  close_gt: String
  close_gte: String
  close_contains: String
  close_not_contains: String
  close_starts_with: String
  close_not_starts_with: String
  close_ends_with: String
  close_not_ends_with: String
  AND: [OpeningHoursWhereInput!]
  OR: [OpeningHoursWhereInput!]
  NOT: [OpeningHoursWhereInput!]
}

input OpeningHoursWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  busy(where: BusyWhereUniqueInput!): Busy
  busies(where: BusyWhereInput, orderBy: BusyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Busy]!
  busiesConnection(where: BusyWhereInput, orderBy: BusyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BusyConnection!
  cafe(where: CafeWhereUniqueInput!): Cafe
  cafes(where: CafeWhereInput, orderBy: CafeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cafe]!
  cafesConnection(where: CafeWhereInput, orderBy: CafeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CafeConnection!
  environmentSurvey(where: EnvironmentSurveyWhereUniqueInput!): EnvironmentSurvey
  environmentSurveys(where: EnvironmentSurveyWhereInput, orderBy: EnvironmentSurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EnvironmentSurvey]!
  environmentSurveysConnection(where: EnvironmentSurveyWhereInput, orderBy: EnvironmentSurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnvironmentSurveyConnection!
  openingHours(where: OpeningHoursWhereUniqueInput!): OpeningHours
  openingHourses(where: OpeningHoursWhereInput, orderBy: OpeningHoursOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpeningHours]!
  openingHoursesConnection(where: OpeningHoursWhereInput, orderBy: OpeningHoursOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OpeningHoursConnection!
  textReview(where: TextReviewWhereUniqueInput!): TextReview
  textReviews(where: TextReviewWhereInput, orderBy: TextReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextReview]!
  textReviewsConnection(where: TextReviewWhereInput, orderBy: TextReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextReviewConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  busy(where: BusySubscriptionWhereInput): BusySubscriptionPayload
  cafe(where: CafeSubscriptionWhereInput): CafeSubscriptionPayload
  environmentSurvey(where: EnvironmentSurveySubscriptionWhereInput): EnvironmentSurveySubscriptionPayload
  openingHours(where: OpeningHoursSubscriptionWhereInput): OpeningHoursSubscriptionPayload
  textReview(where: TextReviewSubscriptionWhereInput): TextReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TextReview {
  id: ID!
  cafe: Cafe!
  cafeId: ID
  user: User!
  userId: ID
  review: String
  createdAt: DateTime!
}

type TextReviewConnection {
  pageInfo: PageInfo!
  edges: [TextReviewEdge]!
  aggregate: AggregateTextReview!
}

input TextReviewCreateInput {
  id: ID
  cafe: CafeCreateOneWithoutTextReviewInput!
  cafeId: ID
  user: UserCreateOneWithoutTextReviewInput!
  userId: ID
  review: String
}

input TextReviewCreateManyWithoutCafeInput {
  create: [TextReviewCreateWithoutCafeInput!]
  connect: [TextReviewWhereUniqueInput!]
}

input TextReviewCreateManyWithoutUserInput {
  create: [TextReviewCreateWithoutUserInput!]
  connect: [TextReviewWhereUniqueInput!]
}

input TextReviewCreateWithoutCafeInput {
  id: ID
  cafeId: ID
  user: UserCreateOneWithoutTextReviewInput!
  userId: ID
  review: String
}

input TextReviewCreateWithoutUserInput {
  id: ID
  cafe: CafeCreateOneWithoutTextReviewInput!
  cafeId: ID
  userId: ID
  review: String
}

type TextReviewEdge {
  node: TextReview!
  cursor: String!
}

enum TextReviewOrderByInput {
  id_ASC
  id_DESC
  cafeId_ASC
  cafeId_DESC
  userId_ASC
  userId_DESC
  review_ASC
  review_DESC
  createdAt_ASC
  createdAt_DESC
}

type TextReviewPreviousValues {
  id: ID!
  cafeId: ID
  userId: ID
  review: String
  createdAt: DateTime!
}

input TextReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TextReviewScalarWhereInput!]
  OR: [TextReviewScalarWhereInput!]
  NOT: [TextReviewScalarWhereInput!]
}

type TextReviewSubscriptionPayload {
  mutation: MutationType!
  node: TextReview
  updatedFields: [String!]
  previousValues: TextReviewPreviousValues
}

input TextReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextReviewWhereInput
  AND: [TextReviewSubscriptionWhereInput!]
  OR: [TextReviewSubscriptionWhereInput!]
  NOT: [TextReviewSubscriptionWhereInput!]
}

input TextReviewUpdateInput {
  cafe: CafeUpdateOneRequiredWithoutTextReviewInput
  cafeId: ID
  user: UserUpdateOneRequiredWithoutTextReviewInput
  userId: ID
  review: String
}

input TextReviewUpdateManyDataInput {
  cafeId: ID
  userId: ID
  review: String
}

input TextReviewUpdateManyMutationInput {
  cafeId: ID
  userId: ID
  review: String
}

input TextReviewUpdateManyWithoutCafeInput {
  create: [TextReviewCreateWithoutCafeInput!]
  delete: [TextReviewWhereUniqueInput!]
  connect: [TextReviewWhereUniqueInput!]
  set: [TextReviewWhereUniqueInput!]
  disconnect: [TextReviewWhereUniqueInput!]
  update: [TextReviewUpdateWithWhereUniqueWithoutCafeInput!]
  upsert: [TextReviewUpsertWithWhereUniqueWithoutCafeInput!]
  deleteMany: [TextReviewScalarWhereInput!]
  updateMany: [TextReviewUpdateManyWithWhereNestedInput!]
}

input TextReviewUpdateManyWithoutUserInput {
  create: [TextReviewCreateWithoutUserInput!]
  delete: [TextReviewWhereUniqueInput!]
  connect: [TextReviewWhereUniqueInput!]
  set: [TextReviewWhereUniqueInput!]
  disconnect: [TextReviewWhereUniqueInput!]
  update: [TextReviewUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TextReviewUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TextReviewScalarWhereInput!]
  updateMany: [TextReviewUpdateManyWithWhereNestedInput!]
}

input TextReviewUpdateManyWithWhereNestedInput {
  where: TextReviewScalarWhereInput!
  data: TextReviewUpdateManyDataInput!
}

input TextReviewUpdateWithoutCafeDataInput {
  cafeId: ID
  user: UserUpdateOneRequiredWithoutTextReviewInput
  userId: ID
  review: String
}

input TextReviewUpdateWithoutUserDataInput {
  cafe: CafeUpdateOneRequiredWithoutTextReviewInput
  cafeId: ID
  userId: ID
  review: String
}

input TextReviewUpdateWithWhereUniqueWithoutCafeInput {
  where: TextReviewWhereUniqueInput!
  data: TextReviewUpdateWithoutCafeDataInput!
}

input TextReviewUpdateWithWhereUniqueWithoutUserInput {
  where: TextReviewWhereUniqueInput!
  data: TextReviewUpdateWithoutUserDataInput!
}

input TextReviewUpsertWithWhereUniqueWithoutCafeInput {
  where: TextReviewWhereUniqueInput!
  update: TextReviewUpdateWithoutCafeDataInput!
  create: TextReviewCreateWithoutCafeInput!
}

input TextReviewUpsertWithWhereUniqueWithoutUserInput {
  where: TextReviewWhereUniqueInput!
  update: TextReviewUpdateWithoutUserDataInput!
  create: TextReviewCreateWithoutUserInput!
}

input TextReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cafe: CafeWhereInput
  cafeId: ID
  cafeId_not: ID
  cafeId_in: [ID!]
  cafeId_not_in: [ID!]
  cafeId_lt: ID
  cafeId_lte: ID
  cafeId_gt: ID
  cafeId_gte: ID
  cafeId_contains: ID
  cafeId_not_contains: ID
  cafeId_starts_with: ID
  cafeId_not_starts_with: ID
  cafeId_ends_with: ID
  cafeId_not_ends_with: ID
  user: UserWhereInput
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TextReviewWhereInput!]
  OR: [TextReviewWhereInput!]
  NOT: [TextReviewWhereInput!]
}

input TextReviewWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  userName: String
  environmentSurvey(where: EnvironmentSurveyWhereInput, orderBy: EnvironmentSurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EnvironmentSurvey!]
  textReview(where: TextReviewWhereInput, orderBy: TextReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextReview!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userName: String
  environmentSurvey: EnvironmentSurveyCreateManyWithoutUserInput
  textReview: TextReviewCreateManyWithoutUserInput
}

input UserCreateOneWithoutEnvironmentSurveyInput {
  create: UserCreateWithoutEnvironmentSurveyInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTextReviewInput {
  create: UserCreateWithoutTextReviewInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEnvironmentSurveyInput {
  id: ID
  userName: String
  textReview: TextReviewCreateManyWithoutUserInput
}

input UserCreateWithoutTextReviewInput {
  id: ID
  userName: String
  environmentSurvey: EnvironmentSurveyCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userName_ASC
  userName_DESC
}

type UserPreviousValues {
  id: ID!
  userName: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  userName: String
  environmentSurvey: EnvironmentSurveyUpdateManyWithoutUserInput
  textReview: TextReviewUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  userName: String
}

input UserUpdateOneRequiredWithoutEnvironmentSurveyInput {
  create: UserCreateWithoutEnvironmentSurveyInput
  update: UserUpdateWithoutEnvironmentSurveyDataInput
  upsert: UserUpsertWithoutEnvironmentSurveyInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTextReviewInput {
  create: UserCreateWithoutTextReviewInput
  update: UserUpdateWithoutTextReviewDataInput
  upsert: UserUpsertWithoutTextReviewInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutEnvironmentSurveyDataInput {
  userName: String
  textReview: TextReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutTextReviewDataInput {
  userName: String
  environmentSurvey: EnvironmentSurveyUpdateManyWithoutUserInput
}

input UserUpsertWithoutEnvironmentSurveyInput {
  update: UserUpdateWithoutEnvironmentSurveyDataInput!
  create: UserCreateWithoutEnvironmentSurveyInput!
}

input UserUpsertWithoutTextReviewInput {
  update: UserUpdateWithoutTextReviewDataInput!
  create: UserCreateWithoutTextReviewInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  environmentSurvey_every: EnvironmentSurveyWhereInput
  environmentSurvey_some: EnvironmentSurveyWhereInput
  environmentSurvey_none: EnvironmentSurveyWhereInput
  textReview_every: TextReviewWhereInput
  textReview_some: TextReviewWhereInput
  textReview_none: TextReviewWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    