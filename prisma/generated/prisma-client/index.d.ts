// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  busy: (where?: BusyWhereInput) => Promise<boolean>;
  cafe: (where?: CafeWhereInput) => Promise<boolean>;
  environmentSurvey: (where?: EnvironmentSurveyWhereInput) => Promise<boolean>;
  openingHours: (where?: OpeningHoursWhereInput) => Promise<boolean>;
  textReview: (where?: TextReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  busy: (where: BusyWhereUniqueInput) => BusyNullablePromise;
  busies: (args?: {
    where?: BusyWhereInput;
    orderBy?: BusyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Busy>;
  busiesConnection: (args?: {
    where?: BusyWhereInput;
    orderBy?: BusyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BusyConnectionPromise;
  cafe: (where: CafeWhereUniqueInput) => CafeNullablePromise;
  cafes: (args?: {
    where?: CafeWhereInput;
    orderBy?: CafeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cafe>;
  cafesConnection: (args?: {
    where?: CafeWhereInput;
    orderBy?: CafeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CafeConnectionPromise;
  environmentSurvey: (
    where: EnvironmentSurveyWhereUniqueInput
  ) => EnvironmentSurveyNullablePromise;
  environmentSurveys: (args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EnvironmentSurvey>;
  environmentSurveysConnection: (args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EnvironmentSurveyConnectionPromise;
  openingHours: (
    where: OpeningHoursWhereUniqueInput
  ) => OpeningHoursNullablePromise;
  openingHourses: (args?: {
    where?: OpeningHoursWhereInput;
    orderBy?: OpeningHoursOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OpeningHours>;
  openingHoursesConnection: (args?: {
    where?: OpeningHoursWhereInput;
    orderBy?: OpeningHoursOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OpeningHoursConnectionPromise;
  textReview: (where: TextReviewWhereUniqueInput) => TextReviewNullablePromise;
  textReviews: (args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TextReview>;
  textReviewsConnection: (args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TextReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBusy: (data: BusyCreateInput) => BusyPromise;
  updateBusy: (args: {
    data: BusyUpdateInput;
    where: BusyWhereUniqueInput;
  }) => BusyPromise;
  updateManyBusies: (args: {
    data: BusyUpdateManyMutationInput;
    where?: BusyWhereInput;
  }) => BatchPayloadPromise;
  upsertBusy: (args: {
    where: BusyWhereUniqueInput;
    create: BusyCreateInput;
    update: BusyUpdateInput;
  }) => BusyPromise;
  deleteBusy: (where: BusyWhereUniqueInput) => BusyPromise;
  deleteManyBusies: (where?: BusyWhereInput) => BatchPayloadPromise;
  createCafe: (data: CafeCreateInput) => CafePromise;
  updateCafe: (args: {
    data: CafeUpdateInput;
    where: CafeWhereUniqueInput;
  }) => CafePromise;
  updateManyCafes: (args: {
    data: CafeUpdateManyMutationInput;
    where?: CafeWhereInput;
  }) => BatchPayloadPromise;
  upsertCafe: (args: {
    where: CafeWhereUniqueInput;
    create: CafeCreateInput;
    update: CafeUpdateInput;
  }) => CafePromise;
  deleteCafe: (where: CafeWhereUniqueInput) => CafePromise;
  deleteManyCafes: (where?: CafeWhereInput) => BatchPayloadPromise;
  createEnvironmentSurvey: (
    data: EnvironmentSurveyCreateInput
  ) => EnvironmentSurveyPromise;
  updateEnvironmentSurvey: (args: {
    data: EnvironmentSurveyUpdateInput;
    where: EnvironmentSurveyWhereUniqueInput;
  }) => EnvironmentSurveyPromise;
  updateManyEnvironmentSurveys: (args: {
    data: EnvironmentSurveyUpdateManyMutationInput;
    where?: EnvironmentSurveyWhereInput;
  }) => BatchPayloadPromise;
  upsertEnvironmentSurvey: (args: {
    where: EnvironmentSurveyWhereUniqueInput;
    create: EnvironmentSurveyCreateInput;
    update: EnvironmentSurveyUpdateInput;
  }) => EnvironmentSurveyPromise;
  deleteEnvironmentSurvey: (
    where: EnvironmentSurveyWhereUniqueInput
  ) => EnvironmentSurveyPromise;
  deleteManyEnvironmentSurveys: (
    where?: EnvironmentSurveyWhereInput
  ) => BatchPayloadPromise;
  createOpeningHours: (data: OpeningHoursCreateInput) => OpeningHoursPromise;
  updateOpeningHours: (args: {
    data: OpeningHoursUpdateInput;
    where: OpeningHoursWhereUniqueInput;
  }) => OpeningHoursPromise;
  updateManyOpeningHourses: (args: {
    data: OpeningHoursUpdateManyMutationInput;
    where?: OpeningHoursWhereInput;
  }) => BatchPayloadPromise;
  upsertOpeningHours: (args: {
    where: OpeningHoursWhereUniqueInput;
    create: OpeningHoursCreateInput;
    update: OpeningHoursUpdateInput;
  }) => OpeningHoursPromise;
  deleteOpeningHours: (
    where: OpeningHoursWhereUniqueInput
  ) => OpeningHoursPromise;
  deleteManyOpeningHourses: (
    where?: OpeningHoursWhereInput
  ) => BatchPayloadPromise;
  createTextReview: (data: TextReviewCreateInput) => TextReviewPromise;
  updateTextReview: (args: {
    data: TextReviewUpdateInput;
    where: TextReviewWhereUniqueInput;
  }) => TextReviewPromise;
  updateManyTextReviews: (args: {
    data: TextReviewUpdateManyMutationInput;
    where?: TextReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertTextReview: (args: {
    where: TextReviewWhereUniqueInput;
    create: TextReviewCreateInput;
    update: TextReviewUpdateInput;
  }) => TextReviewPromise;
  deleteTextReview: (where: TextReviewWhereUniqueInput) => TextReviewPromise;
  deleteManyTextReviews: (where?: TextReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  busy: (
    where?: BusySubscriptionWhereInput
  ) => BusySubscriptionPayloadSubscription;
  cafe: (
    where?: CafeSubscriptionWhereInput
  ) => CafeSubscriptionPayloadSubscription;
  environmentSurvey: (
    where?: EnvironmentSurveySubscriptionWhereInput
  ) => EnvironmentSurveySubscriptionPayloadSubscription;
  openingHours: (
    where?: OpeningHoursSubscriptionWhereInput
  ) => OpeningHoursSubscriptionPayloadSubscription;
  textReview: (
    where?: TextReviewSubscriptionWhereInput
  ) => TextReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OpeningHoursOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cafeId_ASC"
  | "cafeId_DESC"
  | "dayOfTheWeek_ASC"
  | "dayOfTheWeek_DESC"
  | "open_ASC"
  | "open_DESC"
  | "close_ASC"
  | "close_DESC";

export type BusyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cafeId_ASC"
  | "cafeId_DESC"
  | "dayOfTheWeek_ASC"
  | "dayOfTheWeek_DESC"
  | "time_ASC"
  | "time_DESC"
  | "busyness_ASC"
  | "busyness_DESC";

export type EnvironmentSurveyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cafeId_ASC"
  | "cafeId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "loudness_ASC"
  | "loudness_DESC"
  | "cafeSize_ASC"
  | "cafeSize_DESC"
  | "plugin_ASC"
  | "plugin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type TextReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cafeId_ASC"
  | "cafeId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "review_ASC"
  | "review_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CafeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cafename_ASC"
  | "cafename_DESC"
  | "address_ASC"
  | "address_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "franchise_ASC"
  | "franchise_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userName_ASC"
  | "userName_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BusyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OpeningHoursWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafe?: Maybe<CafeWhereInput>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  dayOfTheWeek_not?: Maybe<String>;
  dayOfTheWeek_in?: Maybe<String[] | String>;
  dayOfTheWeek_not_in?: Maybe<String[] | String>;
  dayOfTheWeek_lt?: Maybe<String>;
  dayOfTheWeek_lte?: Maybe<String>;
  dayOfTheWeek_gt?: Maybe<String>;
  dayOfTheWeek_gte?: Maybe<String>;
  dayOfTheWeek_contains?: Maybe<String>;
  dayOfTheWeek_not_contains?: Maybe<String>;
  dayOfTheWeek_starts_with?: Maybe<String>;
  dayOfTheWeek_not_starts_with?: Maybe<String>;
  dayOfTheWeek_ends_with?: Maybe<String>;
  dayOfTheWeek_not_ends_with?: Maybe<String>;
  open?: Maybe<String>;
  open_not?: Maybe<String>;
  open_in?: Maybe<String[] | String>;
  open_not_in?: Maybe<String[] | String>;
  open_lt?: Maybe<String>;
  open_lte?: Maybe<String>;
  open_gt?: Maybe<String>;
  open_gte?: Maybe<String>;
  open_contains?: Maybe<String>;
  open_not_contains?: Maybe<String>;
  open_starts_with?: Maybe<String>;
  open_not_starts_with?: Maybe<String>;
  open_ends_with?: Maybe<String>;
  open_not_ends_with?: Maybe<String>;
  close?: Maybe<String>;
  close_not?: Maybe<String>;
  close_in?: Maybe<String[] | String>;
  close_not_in?: Maybe<String[] | String>;
  close_lt?: Maybe<String>;
  close_lte?: Maybe<String>;
  close_gt?: Maybe<String>;
  close_gte?: Maybe<String>;
  close_contains?: Maybe<String>;
  close_not_contains?: Maybe<String>;
  close_starts_with?: Maybe<String>;
  close_not_starts_with?: Maybe<String>;
  close_ends_with?: Maybe<String>;
  close_not_ends_with?: Maybe<String>;
  AND?: Maybe<OpeningHoursWhereInput[] | OpeningHoursWhereInput>;
  OR?: Maybe<OpeningHoursWhereInput[] | OpeningHoursWhereInput>;
  NOT?: Maybe<OpeningHoursWhereInput[] | OpeningHoursWhereInput>;
}

export interface CafeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafename?: Maybe<String>;
  cafename_not?: Maybe<String>;
  cafename_in?: Maybe<String[] | String>;
  cafename_not_in?: Maybe<String[] | String>;
  cafename_lt?: Maybe<String>;
  cafename_lte?: Maybe<String>;
  cafename_gt?: Maybe<String>;
  cafename_gte?: Maybe<String>;
  cafename_contains?: Maybe<String>;
  cafename_not_contains?: Maybe<String>;
  cafename_starts_with?: Maybe<String>;
  cafename_not_starts_with?: Maybe<String>;
  cafename_ends_with?: Maybe<String>;
  cafename_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  lat?: Maybe<String>;
  lat_not?: Maybe<String>;
  lat_in?: Maybe<String[] | String>;
  lat_not_in?: Maybe<String[] | String>;
  lat_lt?: Maybe<String>;
  lat_lte?: Maybe<String>;
  lat_gt?: Maybe<String>;
  lat_gte?: Maybe<String>;
  lat_contains?: Maybe<String>;
  lat_not_contains?: Maybe<String>;
  lat_starts_with?: Maybe<String>;
  lat_not_starts_with?: Maybe<String>;
  lat_ends_with?: Maybe<String>;
  lat_not_ends_with?: Maybe<String>;
  lng?: Maybe<String>;
  lng_not?: Maybe<String>;
  lng_in?: Maybe<String[] | String>;
  lng_not_in?: Maybe<String[] | String>;
  lng_lt?: Maybe<String>;
  lng_lte?: Maybe<String>;
  lng_gt?: Maybe<String>;
  lng_gte?: Maybe<String>;
  lng_contains?: Maybe<String>;
  lng_not_contains?: Maybe<String>;
  lng_starts_with?: Maybe<String>;
  lng_not_starts_with?: Maybe<String>;
  lng_ends_with?: Maybe<String>;
  lng_not_ends_with?: Maybe<String>;
  franchise?: Maybe<String>;
  franchise_not?: Maybe<String>;
  franchise_in?: Maybe<String[] | String>;
  franchise_not_in?: Maybe<String[] | String>;
  franchise_lt?: Maybe<String>;
  franchise_lte?: Maybe<String>;
  franchise_gt?: Maybe<String>;
  franchise_gte?: Maybe<String>;
  franchise_contains?: Maybe<String>;
  franchise_not_contains?: Maybe<String>;
  franchise_starts_with?: Maybe<String>;
  franchise_not_starts_with?: Maybe<String>;
  franchise_ends_with?: Maybe<String>;
  franchise_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  openingHours_every?: Maybe<OpeningHoursWhereInput>;
  openingHours_some?: Maybe<OpeningHoursWhereInput>;
  openingHours_none?: Maybe<OpeningHoursWhereInput>;
  busy_every?: Maybe<BusyWhereInput>;
  busy_some?: Maybe<BusyWhereInput>;
  busy_none?: Maybe<BusyWhereInput>;
  environmentSurvey_every?: Maybe<EnvironmentSurveyWhereInput>;
  environmentSurvey_some?: Maybe<EnvironmentSurveyWhereInput>;
  environmentSurvey_none?: Maybe<EnvironmentSurveyWhereInput>;
  textReview_every?: Maybe<TextReviewWhereInput>;
  textReview_some?: Maybe<TextReviewWhereInput>;
  textReview_none?: Maybe<TextReviewWhereInput>;
  AND?: Maybe<CafeWhereInput[] | CafeWhereInput>;
  OR?: Maybe<CafeWhereInput[] | CafeWhereInput>;
  NOT?: Maybe<CafeWhereInput[] | CafeWhereInput>;
}

export interface BusyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafe?: Maybe<CafeWhereInput>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  dayOfTheWeek_not?: Maybe<String>;
  dayOfTheWeek_in?: Maybe<String[] | String>;
  dayOfTheWeek_not_in?: Maybe<String[] | String>;
  dayOfTheWeek_lt?: Maybe<String>;
  dayOfTheWeek_lte?: Maybe<String>;
  dayOfTheWeek_gt?: Maybe<String>;
  dayOfTheWeek_gte?: Maybe<String>;
  dayOfTheWeek_contains?: Maybe<String>;
  dayOfTheWeek_not_contains?: Maybe<String>;
  dayOfTheWeek_starts_with?: Maybe<String>;
  dayOfTheWeek_not_starts_with?: Maybe<String>;
  dayOfTheWeek_ends_with?: Maybe<String>;
  dayOfTheWeek_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  busyness?: Maybe<String>;
  busyness_not?: Maybe<String>;
  busyness_in?: Maybe<String[] | String>;
  busyness_not_in?: Maybe<String[] | String>;
  busyness_lt?: Maybe<String>;
  busyness_lte?: Maybe<String>;
  busyness_gt?: Maybe<String>;
  busyness_gte?: Maybe<String>;
  busyness_contains?: Maybe<String>;
  busyness_not_contains?: Maybe<String>;
  busyness_starts_with?: Maybe<String>;
  busyness_not_starts_with?: Maybe<String>;
  busyness_ends_with?: Maybe<String>;
  busyness_not_ends_with?: Maybe<String>;
  AND?: Maybe<BusyWhereInput[] | BusyWhereInput>;
  OR?: Maybe<BusyWhereInput[] | BusyWhereInput>;
  NOT?: Maybe<BusyWhereInput[] | BusyWhereInput>;
}

export interface EnvironmentSurveyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafe?: Maybe<CafeWhereInput>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  loudness_not?: Maybe<String>;
  loudness_in?: Maybe<String[] | String>;
  loudness_not_in?: Maybe<String[] | String>;
  loudness_lt?: Maybe<String>;
  loudness_lte?: Maybe<String>;
  loudness_gt?: Maybe<String>;
  loudness_gte?: Maybe<String>;
  loudness_contains?: Maybe<String>;
  loudness_not_contains?: Maybe<String>;
  loudness_starts_with?: Maybe<String>;
  loudness_not_starts_with?: Maybe<String>;
  loudness_ends_with?: Maybe<String>;
  loudness_not_ends_with?: Maybe<String>;
  cafeSize?: Maybe<String>;
  cafeSize_not?: Maybe<String>;
  cafeSize_in?: Maybe<String[] | String>;
  cafeSize_not_in?: Maybe<String[] | String>;
  cafeSize_lt?: Maybe<String>;
  cafeSize_lte?: Maybe<String>;
  cafeSize_gt?: Maybe<String>;
  cafeSize_gte?: Maybe<String>;
  cafeSize_contains?: Maybe<String>;
  cafeSize_not_contains?: Maybe<String>;
  cafeSize_starts_with?: Maybe<String>;
  cafeSize_not_starts_with?: Maybe<String>;
  cafeSize_ends_with?: Maybe<String>;
  cafeSize_not_ends_with?: Maybe<String>;
  plugin?: Maybe<String>;
  plugin_not?: Maybe<String>;
  plugin_in?: Maybe<String[] | String>;
  plugin_not_in?: Maybe<String[] | String>;
  plugin_lt?: Maybe<String>;
  plugin_lte?: Maybe<String>;
  plugin_gt?: Maybe<String>;
  plugin_gte?: Maybe<String>;
  plugin_contains?: Maybe<String>;
  plugin_not_contains?: Maybe<String>;
  plugin_starts_with?: Maybe<String>;
  plugin_not_starts_with?: Maybe<String>;
  plugin_ends_with?: Maybe<String>;
  plugin_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EnvironmentSurveyWhereInput[] | EnvironmentSurveyWhereInput>;
  OR?: Maybe<EnvironmentSurveyWhereInput[] | EnvironmentSurveyWhereInput>;
  NOT?: Maybe<EnvironmentSurveyWhereInput[] | EnvironmentSurveyWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  environmentSurvey_every?: Maybe<EnvironmentSurveyWhereInput>;
  environmentSurvey_some?: Maybe<EnvironmentSurveyWhereInput>;
  environmentSurvey_none?: Maybe<EnvironmentSurveyWhereInput>;
  textReview_every?: Maybe<TextReviewWhereInput>;
  textReview_some?: Maybe<TextReviewWhereInput>;
  textReview_none?: Maybe<TextReviewWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TextReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafe?: Maybe<CafeWhereInput>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  review?: Maybe<String>;
  review_not?: Maybe<String>;
  review_in?: Maybe<String[] | String>;
  review_not_in?: Maybe<String[] | String>;
  review_lt?: Maybe<String>;
  review_lte?: Maybe<String>;
  review_gt?: Maybe<String>;
  review_gte?: Maybe<String>;
  review_contains?: Maybe<String>;
  review_not_contains?: Maybe<String>;
  review_starts_with?: Maybe<String>;
  review_not_starts_with?: Maybe<String>;
  review_ends_with?: Maybe<String>;
  review_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TextReviewWhereInput[] | TextReviewWhereInput>;
  OR?: Maybe<TextReviewWhereInput[] | TextReviewWhereInput>;
  NOT?: Maybe<TextReviewWhereInput[] | TextReviewWhereInput>;
}

export type CafeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type EnvironmentSurveyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OpeningHoursWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TextReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BusyCreateInput {
  id?: Maybe<ID_Input>;
  cafe: CafeCreateOneWithoutBusyInput;
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek: String;
  time: String;
  busyness: String;
}

export interface CafeCreateOneWithoutBusyInput {
  create?: Maybe<CafeCreateWithoutBusyInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeCreateWithoutBusyInput {
  id?: Maybe<ID_Input>;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursCreateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyCreateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewCreateManyWithoutCafeInput>;
}

export interface OpeningHoursCreateManyWithoutCafeInput {
  create?: Maybe<
    OpeningHoursCreateWithoutCafeInput[] | OpeningHoursCreateWithoutCafeInput
  >;
  connect?: Maybe<
    OpeningHoursWhereUniqueInput[] | OpeningHoursWhereUniqueInput
  >;
}

export interface OpeningHoursCreateWithoutCafeInput {
  id?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek: String;
  open: String;
  close: String;
}

export interface EnvironmentSurveyCreateManyWithoutCafeInput {
  create?: Maybe<
    | EnvironmentSurveyCreateWithoutCafeInput[]
    | EnvironmentSurveyCreateWithoutCafeInput
  >;
  connect?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
}

export interface EnvironmentSurveyCreateWithoutCafeInput {
  id?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  user: UserCreateOneWithoutEnvironmentSurveyInput;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface UserCreateOneWithoutEnvironmentSurveyInput {
  create?: Maybe<UserCreateWithoutEnvironmentSurveyInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutEnvironmentSurveyInput {
  id?: Maybe<ID_Input>;
  userName?: Maybe<String>;
  textReview?: Maybe<TextReviewCreateManyWithoutUserInput>;
}

export interface TextReviewCreateManyWithoutUserInput {
  create?: Maybe<
    TextReviewCreateWithoutUserInput[] | TextReviewCreateWithoutUserInput
  >;
  connect?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
}

export interface TextReviewCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  cafe: CafeCreateOneWithoutTextReviewInput;
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface CafeCreateOneWithoutTextReviewInput {
  create?: Maybe<CafeCreateWithoutTextReviewInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeCreateWithoutTextReviewInput {
  id?: Maybe<ID_Input>;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursCreateManyWithoutCafeInput>;
  busy?: Maybe<BusyCreateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyCreateManyWithoutCafeInput>;
}

export interface BusyCreateManyWithoutCafeInput {
  create?: Maybe<BusyCreateWithoutCafeInput[] | BusyCreateWithoutCafeInput>;
  connect?: Maybe<BusyWhereUniqueInput[] | BusyWhereUniqueInput>;
}

export interface BusyCreateWithoutCafeInput {
  id?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek: String;
  time: String;
  busyness: String;
}

export interface TextReviewCreateManyWithoutCafeInput {
  create?: Maybe<
    TextReviewCreateWithoutCafeInput[] | TextReviewCreateWithoutCafeInput
  >;
  connect?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
}

export interface TextReviewCreateWithoutCafeInput {
  id?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  user: UserCreateOneWithoutTextReviewInput;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface UserCreateOneWithoutTextReviewInput {
  create?: Maybe<UserCreateWithoutTextReviewInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTextReviewInput {
  id?: Maybe<ID_Input>;
  userName?: Maybe<String>;
  environmentSurvey?: Maybe<EnvironmentSurveyCreateManyWithoutUserInput>;
}

export interface EnvironmentSurveyCreateManyWithoutUserInput {
  create?: Maybe<
    | EnvironmentSurveyCreateWithoutUserInput[]
    | EnvironmentSurveyCreateWithoutUserInput
  >;
  connect?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
}

export interface EnvironmentSurveyCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  cafe: CafeCreateOneWithoutEnvironmentSurveyInput;
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface CafeCreateOneWithoutEnvironmentSurveyInput {
  create?: Maybe<CafeCreateWithoutEnvironmentSurveyInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeCreateWithoutEnvironmentSurveyInput {
  id?: Maybe<ID_Input>;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursCreateManyWithoutCafeInput>;
  busy?: Maybe<BusyCreateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewCreateManyWithoutCafeInput>;
}

export interface BusyUpdateInput {
  cafe?: Maybe<CafeUpdateOneRequiredWithoutBusyInput>;
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  time?: Maybe<String>;
  busyness?: Maybe<String>;
}

export interface CafeUpdateOneRequiredWithoutBusyInput {
  create?: Maybe<CafeCreateWithoutBusyInput>;
  update?: Maybe<CafeUpdateWithoutBusyDataInput>;
  upsert?: Maybe<CafeUpsertWithoutBusyInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeUpdateWithoutBusyDataInput {
  cafename?: Maybe<String>;
  address?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursUpdateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyUpdateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewUpdateManyWithoutCafeInput>;
}

export interface OpeningHoursUpdateManyWithoutCafeInput {
  create?: Maybe<
    OpeningHoursCreateWithoutCafeInput[] | OpeningHoursCreateWithoutCafeInput
  >;
  delete?: Maybe<OpeningHoursWhereUniqueInput[] | OpeningHoursWhereUniqueInput>;
  connect?: Maybe<
    OpeningHoursWhereUniqueInput[] | OpeningHoursWhereUniqueInput
  >;
  set?: Maybe<OpeningHoursWhereUniqueInput[] | OpeningHoursWhereUniqueInput>;
  disconnect?: Maybe<
    OpeningHoursWhereUniqueInput[] | OpeningHoursWhereUniqueInput
  >;
  update?: Maybe<
    | OpeningHoursUpdateWithWhereUniqueWithoutCafeInput[]
    | OpeningHoursUpdateWithWhereUniqueWithoutCafeInput
  >;
  upsert?: Maybe<
    | OpeningHoursUpsertWithWhereUniqueWithoutCafeInput[]
    | OpeningHoursUpsertWithWhereUniqueWithoutCafeInput
  >;
  deleteMany?: Maybe<
    OpeningHoursScalarWhereInput[] | OpeningHoursScalarWhereInput
  >;
  updateMany?: Maybe<
    | OpeningHoursUpdateManyWithWhereNestedInput[]
    | OpeningHoursUpdateManyWithWhereNestedInput
  >;
}

export interface OpeningHoursUpdateWithWhereUniqueWithoutCafeInput {
  where: OpeningHoursWhereUniqueInput;
  data: OpeningHoursUpdateWithoutCafeDataInput;
}

export interface OpeningHoursUpdateWithoutCafeDataInput {
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  open?: Maybe<String>;
  close?: Maybe<String>;
}

export interface OpeningHoursUpsertWithWhereUniqueWithoutCafeInput {
  where: OpeningHoursWhereUniqueInput;
  update: OpeningHoursUpdateWithoutCafeDataInput;
  create: OpeningHoursCreateWithoutCafeInput;
}

export interface OpeningHoursScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  dayOfTheWeek_not?: Maybe<String>;
  dayOfTheWeek_in?: Maybe<String[] | String>;
  dayOfTheWeek_not_in?: Maybe<String[] | String>;
  dayOfTheWeek_lt?: Maybe<String>;
  dayOfTheWeek_lte?: Maybe<String>;
  dayOfTheWeek_gt?: Maybe<String>;
  dayOfTheWeek_gte?: Maybe<String>;
  dayOfTheWeek_contains?: Maybe<String>;
  dayOfTheWeek_not_contains?: Maybe<String>;
  dayOfTheWeek_starts_with?: Maybe<String>;
  dayOfTheWeek_not_starts_with?: Maybe<String>;
  dayOfTheWeek_ends_with?: Maybe<String>;
  dayOfTheWeek_not_ends_with?: Maybe<String>;
  open?: Maybe<String>;
  open_not?: Maybe<String>;
  open_in?: Maybe<String[] | String>;
  open_not_in?: Maybe<String[] | String>;
  open_lt?: Maybe<String>;
  open_lte?: Maybe<String>;
  open_gt?: Maybe<String>;
  open_gte?: Maybe<String>;
  open_contains?: Maybe<String>;
  open_not_contains?: Maybe<String>;
  open_starts_with?: Maybe<String>;
  open_not_starts_with?: Maybe<String>;
  open_ends_with?: Maybe<String>;
  open_not_ends_with?: Maybe<String>;
  close?: Maybe<String>;
  close_not?: Maybe<String>;
  close_in?: Maybe<String[] | String>;
  close_not_in?: Maybe<String[] | String>;
  close_lt?: Maybe<String>;
  close_lte?: Maybe<String>;
  close_gt?: Maybe<String>;
  close_gte?: Maybe<String>;
  close_contains?: Maybe<String>;
  close_not_contains?: Maybe<String>;
  close_starts_with?: Maybe<String>;
  close_not_starts_with?: Maybe<String>;
  close_ends_with?: Maybe<String>;
  close_not_ends_with?: Maybe<String>;
  AND?: Maybe<OpeningHoursScalarWhereInput[] | OpeningHoursScalarWhereInput>;
  OR?: Maybe<OpeningHoursScalarWhereInput[] | OpeningHoursScalarWhereInput>;
  NOT?: Maybe<OpeningHoursScalarWhereInput[] | OpeningHoursScalarWhereInput>;
}

export interface OpeningHoursUpdateManyWithWhereNestedInput {
  where: OpeningHoursScalarWhereInput;
  data: OpeningHoursUpdateManyDataInput;
}

export interface OpeningHoursUpdateManyDataInput {
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  open?: Maybe<String>;
  close?: Maybe<String>;
}

export interface EnvironmentSurveyUpdateManyWithoutCafeInput {
  create?: Maybe<
    | EnvironmentSurveyCreateWithoutCafeInput[]
    | EnvironmentSurveyCreateWithoutCafeInput
  >;
  delete?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  connect?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  set?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  disconnect?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  update?: Maybe<
    | EnvironmentSurveyUpdateWithWhereUniqueWithoutCafeInput[]
    | EnvironmentSurveyUpdateWithWhereUniqueWithoutCafeInput
  >;
  upsert?: Maybe<
    | EnvironmentSurveyUpsertWithWhereUniqueWithoutCafeInput[]
    | EnvironmentSurveyUpsertWithWhereUniqueWithoutCafeInput
  >;
  deleteMany?: Maybe<
    EnvironmentSurveyScalarWhereInput[] | EnvironmentSurveyScalarWhereInput
  >;
  updateMany?: Maybe<
    | EnvironmentSurveyUpdateManyWithWhereNestedInput[]
    | EnvironmentSurveyUpdateManyWithWhereNestedInput
  >;
}

export interface EnvironmentSurveyUpdateWithWhereUniqueWithoutCafeInput {
  where: EnvironmentSurveyWhereUniqueInput;
  data: EnvironmentSurveyUpdateWithoutCafeDataInput;
}

export interface EnvironmentSurveyUpdateWithoutCafeDataInput {
  cafeId?: Maybe<ID_Input>;
  user?: Maybe<UserUpdateOneRequiredWithoutEnvironmentSurveyInput>;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutEnvironmentSurveyInput {
  create?: Maybe<UserCreateWithoutEnvironmentSurveyInput>;
  update?: Maybe<UserUpdateWithoutEnvironmentSurveyDataInput>;
  upsert?: Maybe<UserUpsertWithoutEnvironmentSurveyInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutEnvironmentSurveyDataInput {
  userName?: Maybe<String>;
  textReview?: Maybe<TextReviewUpdateManyWithoutUserInput>;
}

export interface TextReviewUpdateManyWithoutUserInput {
  create?: Maybe<
    TextReviewCreateWithoutUserInput[] | TextReviewCreateWithoutUserInput
  >;
  delete?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  connect?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  set?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  disconnect?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  update?: Maybe<
    | TextReviewUpdateWithWhereUniqueWithoutUserInput[]
    | TextReviewUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TextReviewUpsertWithWhereUniqueWithoutUserInput[]
    | TextReviewUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TextReviewScalarWhereInput[] | TextReviewScalarWhereInput>;
  updateMany?: Maybe<
    | TextReviewUpdateManyWithWhereNestedInput[]
    | TextReviewUpdateManyWithWhereNestedInput
  >;
}

export interface TextReviewUpdateWithWhereUniqueWithoutUserInput {
  where: TextReviewWhereUniqueInput;
  data: TextReviewUpdateWithoutUserDataInput;
}

export interface TextReviewUpdateWithoutUserDataInput {
  cafe?: Maybe<CafeUpdateOneRequiredWithoutTextReviewInput>;
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface CafeUpdateOneRequiredWithoutTextReviewInput {
  create?: Maybe<CafeCreateWithoutTextReviewInput>;
  update?: Maybe<CafeUpdateWithoutTextReviewDataInput>;
  upsert?: Maybe<CafeUpsertWithoutTextReviewInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeUpdateWithoutTextReviewDataInput {
  cafename?: Maybe<String>;
  address?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursUpdateManyWithoutCafeInput>;
  busy?: Maybe<BusyUpdateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyUpdateManyWithoutCafeInput>;
}

export interface BusyUpdateManyWithoutCafeInput {
  create?: Maybe<BusyCreateWithoutCafeInput[] | BusyCreateWithoutCafeInput>;
  delete?: Maybe<BusyWhereUniqueInput[] | BusyWhereUniqueInput>;
  connect?: Maybe<BusyWhereUniqueInput[] | BusyWhereUniqueInput>;
  set?: Maybe<BusyWhereUniqueInput[] | BusyWhereUniqueInput>;
  disconnect?: Maybe<BusyWhereUniqueInput[] | BusyWhereUniqueInput>;
  update?: Maybe<
    | BusyUpdateWithWhereUniqueWithoutCafeInput[]
    | BusyUpdateWithWhereUniqueWithoutCafeInput
  >;
  upsert?: Maybe<
    | BusyUpsertWithWhereUniqueWithoutCafeInput[]
    | BusyUpsertWithWhereUniqueWithoutCafeInput
  >;
  deleteMany?: Maybe<BusyScalarWhereInput[] | BusyScalarWhereInput>;
  updateMany?: Maybe<
    BusyUpdateManyWithWhereNestedInput[] | BusyUpdateManyWithWhereNestedInput
  >;
}

export interface BusyUpdateWithWhereUniqueWithoutCafeInput {
  where: BusyWhereUniqueInput;
  data: BusyUpdateWithoutCafeDataInput;
}

export interface BusyUpdateWithoutCafeDataInput {
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  time?: Maybe<String>;
  busyness?: Maybe<String>;
}

export interface BusyUpsertWithWhereUniqueWithoutCafeInput {
  where: BusyWhereUniqueInput;
  update: BusyUpdateWithoutCafeDataInput;
  create: BusyCreateWithoutCafeInput;
}

export interface BusyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  dayOfTheWeek_not?: Maybe<String>;
  dayOfTheWeek_in?: Maybe<String[] | String>;
  dayOfTheWeek_not_in?: Maybe<String[] | String>;
  dayOfTheWeek_lt?: Maybe<String>;
  dayOfTheWeek_lte?: Maybe<String>;
  dayOfTheWeek_gt?: Maybe<String>;
  dayOfTheWeek_gte?: Maybe<String>;
  dayOfTheWeek_contains?: Maybe<String>;
  dayOfTheWeek_not_contains?: Maybe<String>;
  dayOfTheWeek_starts_with?: Maybe<String>;
  dayOfTheWeek_not_starts_with?: Maybe<String>;
  dayOfTheWeek_ends_with?: Maybe<String>;
  dayOfTheWeek_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  busyness?: Maybe<String>;
  busyness_not?: Maybe<String>;
  busyness_in?: Maybe<String[] | String>;
  busyness_not_in?: Maybe<String[] | String>;
  busyness_lt?: Maybe<String>;
  busyness_lte?: Maybe<String>;
  busyness_gt?: Maybe<String>;
  busyness_gte?: Maybe<String>;
  busyness_contains?: Maybe<String>;
  busyness_not_contains?: Maybe<String>;
  busyness_starts_with?: Maybe<String>;
  busyness_not_starts_with?: Maybe<String>;
  busyness_ends_with?: Maybe<String>;
  busyness_not_ends_with?: Maybe<String>;
  AND?: Maybe<BusyScalarWhereInput[] | BusyScalarWhereInput>;
  OR?: Maybe<BusyScalarWhereInput[] | BusyScalarWhereInput>;
  NOT?: Maybe<BusyScalarWhereInput[] | BusyScalarWhereInput>;
}

export interface BusyUpdateManyWithWhereNestedInput {
  where: BusyScalarWhereInput;
  data: BusyUpdateManyDataInput;
}

export interface BusyUpdateManyDataInput {
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  time?: Maybe<String>;
  busyness?: Maybe<String>;
}

export interface CafeUpsertWithoutTextReviewInput {
  update: CafeUpdateWithoutTextReviewDataInput;
  create: CafeCreateWithoutTextReviewInput;
}

export interface TextReviewUpsertWithWhereUniqueWithoutUserInput {
  where: TextReviewWhereUniqueInput;
  update: TextReviewUpdateWithoutUserDataInput;
  create: TextReviewCreateWithoutUserInput;
}

export interface TextReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  review?: Maybe<String>;
  review_not?: Maybe<String>;
  review_in?: Maybe<String[] | String>;
  review_not_in?: Maybe<String[] | String>;
  review_lt?: Maybe<String>;
  review_lte?: Maybe<String>;
  review_gt?: Maybe<String>;
  review_gte?: Maybe<String>;
  review_contains?: Maybe<String>;
  review_not_contains?: Maybe<String>;
  review_starts_with?: Maybe<String>;
  review_not_starts_with?: Maybe<String>;
  review_ends_with?: Maybe<String>;
  review_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TextReviewScalarWhereInput[] | TextReviewScalarWhereInput>;
  OR?: Maybe<TextReviewScalarWhereInput[] | TextReviewScalarWhereInput>;
  NOT?: Maybe<TextReviewScalarWhereInput[] | TextReviewScalarWhereInput>;
}

export interface TextReviewUpdateManyWithWhereNestedInput {
  where: TextReviewScalarWhereInput;
  data: TextReviewUpdateManyDataInput;
}

export interface TextReviewUpdateManyDataInput {
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface UserUpsertWithoutEnvironmentSurveyInput {
  update: UserUpdateWithoutEnvironmentSurveyDataInput;
  create: UserCreateWithoutEnvironmentSurveyInput;
}

export interface EnvironmentSurveyUpsertWithWhereUniqueWithoutCafeInput {
  where: EnvironmentSurveyWhereUniqueInput;
  update: EnvironmentSurveyUpdateWithoutCafeDataInput;
  create: EnvironmentSurveyCreateWithoutCafeInput;
}

export interface EnvironmentSurveyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cafeId?: Maybe<ID_Input>;
  cafeId_not?: Maybe<ID_Input>;
  cafeId_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  cafeId_lt?: Maybe<ID_Input>;
  cafeId_lte?: Maybe<ID_Input>;
  cafeId_gt?: Maybe<ID_Input>;
  cafeId_gte?: Maybe<ID_Input>;
  cafeId_contains?: Maybe<ID_Input>;
  cafeId_not_contains?: Maybe<ID_Input>;
  cafeId_starts_with?: Maybe<ID_Input>;
  cafeId_not_starts_with?: Maybe<ID_Input>;
  cafeId_ends_with?: Maybe<ID_Input>;
  cafeId_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  loudness_not?: Maybe<String>;
  loudness_in?: Maybe<String[] | String>;
  loudness_not_in?: Maybe<String[] | String>;
  loudness_lt?: Maybe<String>;
  loudness_lte?: Maybe<String>;
  loudness_gt?: Maybe<String>;
  loudness_gte?: Maybe<String>;
  loudness_contains?: Maybe<String>;
  loudness_not_contains?: Maybe<String>;
  loudness_starts_with?: Maybe<String>;
  loudness_not_starts_with?: Maybe<String>;
  loudness_ends_with?: Maybe<String>;
  loudness_not_ends_with?: Maybe<String>;
  cafeSize?: Maybe<String>;
  cafeSize_not?: Maybe<String>;
  cafeSize_in?: Maybe<String[] | String>;
  cafeSize_not_in?: Maybe<String[] | String>;
  cafeSize_lt?: Maybe<String>;
  cafeSize_lte?: Maybe<String>;
  cafeSize_gt?: Maybe<String>;
  cafeSize_gte?: Maybe<String>;
  cafeSize_contains?: Maybe<String>;
  cafeSize_not_contains?: Maybe<String>;
  cafeSize_starts_with?: Maybe<String>;
  cafeSize_not_starts_with?: Maybe<String>;
  cafeSize_ends_with?: Maybe<String>;
  cafeSize_not_ends_with?: Maybe<String>;
  plugin?: Maybe<String>;
  plugin_not?: Maybe<String>;
  plugin_in?: Maybe<String[] | String>;
  plugin_not_in?: Maybe<String[] | String>;
  plugin_lt?: Maybe<String>;
  plugin_lte?: Maybe<String>;
  plugin_gt?: Maybe<String>;
  plugin_gte?: Maybe<String>;
  plugin_contains?: Maybe<String>;
  plugin_not_contains?: Maybe<String>;
  plugin_starts_with?: Maybe<String>;
  plugin_not_starts_with?: Maybe<String>;
  plugin_ends_with?: Maybe<String>;
  plugin_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    EnvironmentSurveyScalarWhereInput[] | EnvironmentSurveyScalarWhereInput
  >;
  OR?: Maybe<
    EnvironmentSurveyScalarWhereInput[] | EnvironmentSurveyScalarWhereInput
  >;
  NOT?: Maybe<
    EnvironmentSurveyScalarWhereInput[] | EnvironmentSurveyScalarWhereInput
  >;
}

export interface EnvironmentSurveyUpdateManyWithWhereNestedInput {
  where: EnvironmentSurveyScalarWhereInput;
  data: EnvironmentSurveyUpdateManyDataInput;
}

export interface EnvironmentSurveyUpdateManyDataInput {
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface TextReviewUpdateManyWithoutCafeInput {
  create?: Maybe<
    TextReviewCreateWithoutCafeInput[] | TextReviewCreateWithoutCafeInput
  >;
  delete?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  connect?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  set?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  disconnect?: Maybe<TextReviewWhereUniqueInput[] | TextReviewWhereUniqueInput>;
  update?: Maybe<
    | TextReviewUpdateWithWhereUniqueWithoutCafeInput[]
    | TextReviewUpdateWithWhereUniqueWithoutCafeInput
  >;
  upsert?: Maybe<
    | TextReviewUpsertWithWhereUniqueWithoutCafeInput[]
    | TextReviewUpsertWithWhereUniqueWithoutCafeInput
  >;
  deleteMany?: Maybe<TextReviewScalarWhereInput[] | TextReviewScalarWhereInput>;
  updateMany?: Maybe<
    | TextReviewUpdateManyWithWhereNestedInput[]
    | TextReviewUpdateManyWithWhereNestedInput
  >;
}

export interface TextReviewUpdateWithWhereUniqueWithoutCafeInput {
  where: TextReviewWhereUniqueInput;
  data: TextReviewUpdateWithoutCafeDataInput;
}

export interface TextReviewUpdateWithoutCafeDataInput {
  cafeId?: Maybe<ID_Input>;
  user?: Maybe<UserUpdateOneRequiredWithoutTextReviewInput>;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutTextReviewInput {
  create?: Maybe<UserCreateWithoutTextReviewInput>;
  update?: Maybe<UserUpdateWithoutTextReviewDataInput>;
  upsert?: Maybe<UserUpsertWithoutTextReviewInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTextReviewDataInput {
  userName?: Maybe<String>;
  environmentSurvey?: Maybe<EnvironmentSurveyUpdateManyWithoutUserInput>;
}

export interface EnvironmentSurveyUpdateManyWithoutUserInput {
  create?: Maybe<
    | EnvironmentSurveyCreateWithoutUserInput[]
    | EnvironmentSurveyCreateWithoutUserInput
  >;
  delete?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  connect?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  set?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  disconnect?: Maybe<
    EnvironmentSurveyWhereUniqueInput[] | EnvironmentSurveyWhereUniqueInput
  >;
  update?: Maybe<
    | EnvironmentSurveyUpdateWithWhereUniqueWithoutUserInput[]
    | EnvironmentSurveyUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | EnvironmentSurveyUpsertWithWhereUniqueWithoutUserInput[]
    | EnvironmentSurveyUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    EnvironmentSurveyScalarWhereInput[] | EnvironmentSurveyScalarWhereInput
  >;
  updateMany?: Maybe<
    | EnvironmentSurveyUpdateManyWithWhereNestedInput[]
    | EnvironmentSurveyUpdateManyWithWhereNestedInput
  >;
}

export interface EnvironmentSurveyUpdateWithWhereUniqueWithoutUserInput {
  where: EnvironmentSurveyWhereUniqueInput;
  data: EnvironmentSurveyUpdateWithoutUserDataInput;
}

export interface EnvironmentSurveyUpdateWithoutUserDataInput {
  cafe?: Maybe<CafeUpdateOneRequiredWithoutEnvironmentSurveyInput>;
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface CafeUpdateOneRequiredWithoutEnvironmentSurveyInput {
  create?: Maybe<CafeCreateWithoutEnvironmentSurveyInput>;
  update?: Maybe<CafeUpdateWithoutEnvironmentSurveyDataInput>;
  upsert?: Maybe<CafeUpsertWithoutEnvironmentSurveyInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeUpdateWithoutEnvironmentSurveyDataInput {
  cafename?: Maybe<String>;
  address?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursUpdateManyWithoutCafeInput>;
  busy?: Maybe<BusyUpdateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewUpdateManyWithoutCafeInput>;
}

export interface CafeUpsertWithoutEnvironmentSurveyInput {
  update: CafeUpdateWithoutEnvironmentSurveyDataInput;
  create: CafeCreateWithoutEnvironmentSurveyInput;
}

export interface EnvironmentSurveyUpsertWithWhereUniqueWithoutUserInput {
  where: EnvironmentSurveyWhereUniqueInput;
  update: EnvironmentSurveyUpdateWithoutUserDataInput;
  create: EnvironmentSurveyCreateWithoutUserInput;
}

export interface UserUpsertWithoutTextReviewInput {
  update: UserUpdateWithoutTextReviewDataInput;
  create: UserCreateWithoutTextReviewInput;
}

export interface TextReviewUpsertWithWhereUniqueWithoutCafeInput {
  where: TextReviewWhereUniqueInput;
  update: TextReviewUpdateWithoutCafeDataInput;
  create: TextReviewCreateWithoutCafeInput;
}

export interface CafeUpsertWithoutBusyInput {
  update: CafeUpdateWithoutBusyDataInput;
  create: CafeCreateWithoutBusyInput;
}

export interface BusyUpdateManyMutationInput {
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  time?: Maybe<String>;
  busyness?: Maybe<String>;
}

export interface CafeCreateInput {
  id?: Maybe<ID_Input>;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursCreateManyWithoutCafeInput>;
  busy?: Maybe<BusyCreateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyCreateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewCreateManyWithoutCafeInput>;
}

export interface CafeUpdateInput {
  cafename?: Maybe<String>;
  address?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  franchise?: Maybe<String>;
  openingHours?: Maybe<OpeningHoursUpdateManyWithoutCafeInput>;
  busy?: Maybe<BusyUpdateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyUpdateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewUpdateManyWithoutCafeInput>;
}

export interface CafeUpdateManyMutationInput {
  cafename?: Maybe<String>;
  address?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  franchise?: Maybe<String>;
}

export interface EnvironmentSurveyCreateInput {
  id?: Maybe<ID_Input>;
  cafe: CafeCreateOneWithoutEnvironmentSurveyInput;
  cafeId?: Maybe<ID_Input>;
  user: UserCreateOneWithoutEnvironmentSurveyInput;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface EnvironmentSurveyUpdateInput {
  cafe?: Maybe<CafeUpdateOneRequiredWithoutEnvironmentSurveyInput>;
  cafeId?: Maybe<ID_Input>;
  user?: Maybe<UserUpdateOneRequiredWithoutEnvironmentSurveyInput>;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface EnvironmentSurveyUpdateManyMutationInput {
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  loudness?: Maybe<String>;
  cafeSize?: Maybe<String>;
  plugin?: Maybe<String>;
}

export interface OpeningHoursCreateInput {
  id?: Maybe<ID_Input>;
  cafe: CafeCreateOneWithoutOpeningHoursInput;
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek: String;
  open: String;
  close: String;
}

export interface CafeCreateOneWithoutOpeningHoursInput {
  create?: Maybe<CafeCreateWithoutOpeningHoursInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeCreateWithoutOpeningHoursInput {
  id?: Maybe<ID_Input>;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: Maybe<String>;
  busy?: Maybe<BusyCreateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyCreateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewCreateManyWithoutCafeInput>;
}

export interface OpeningHoursUpdateInput {
  cafe?: Maybe<CafeUpdateOneRequiredWithoutOpeningHoursInput>;
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  open?: Maybe<String>;
  close?: Maybe<String>;
}

export interface CafeUpdateOneRequiredWithoutOpeningHoursInput {
  create?: Maybe<CafeCreateWithoutOpeningHoursInput>;
  update?: Maybe<CafeUpdateWithoutOpeningHoursDataInput>;
  upsert?: Maybe<CafeUpsertWithoutOpeningHoursInput>;
  connect?: Maybe<CafeWhereUniqueInput>;
}

export interface CafeUpdateWithoutOpeningHoursDataInput {
  cafename?: Maybe<String>;
  address?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  franchise?: Maybe<String>;
  busy?: Maybe<BusyUpdateManyWithoutCafeInput>;
  environmentSurvey?: Maybe<EnvironmentSurveyUpdateManyWithoutCafeInput>;
  textReview?: Maybe<TextReviewUpdateManyWithoutCafeInput>;
}

export interface CafeUpsertWithoutOpeningHoursInput {
  update: CafeUpdateWithoutOpeningHoursDataInput;
  create: CafeCreateWithoutOpeningHoursInput;
}

export interface OpeningHoursUpdateManyMutationInput {
  cafeId?: Maybe<ID_Input>;
  dayOfTheWeek?: Maybe<String>;
  open?: Maybe<String>;
  close?: Maybe<String>;
}

export interface TextReviewCreateInput {
  id?: Maybe<ID_Input>;
  cafe: CafeCreateOneWithoutTextReviewInput;
  cafeId?: Maybe<ID_Input>;
  user: UserCreateOneWithoutTextReviewInput;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface TextReviewUpdateInput {
  cafe?: Maybe<CafeUpdateOneRequiredWithoutTextReviewInput>;
  cafeId?: Maybe<ID_Input>;
  user?: Maybe<UserUpdateOneRequiredWithoutTextReviewInput>;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface TextReviewUpdateManyMutationInput {
  cafeId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  review?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  userName?: Maybe<String>;
  environmentSurvey?: Maybe<EnvironmentSurveyCreateManyWithoutUserInput>;
  textReview?: Maybe<TextReviewCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  userName?: Maybe<String>;
  environmentSurvey?: Maybe<EnvironmentSurveyUpdateManyWithoutUserInput>;
  textReview?: Maybe<TextReviewUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  userName?: Maybe<String>;
}

export interface BusySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BusyWhereInput>;
  AND?: Maybe<BusySubscriptionWhereInput[] | BusySubscriptionWhereInput>;
  OR?: Maybe<BusySubscriptionWhereInput[] | BusySubscriptionWhereInput>;
  NOT?: Maybe<BusySubscriptionWhereInput[] | BusySubscriptionWhereInput>;
}

export interface CafeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CafeWhereInput>;
  AND?: Maybe<CafeSubscriptionWhereInput[] | CafeSubscriptionWhereInput>;
  OR?: Maybe<CafeSubscriptionWhereInput[] | CafeSubscriptionWhereInput>;
  NOT?: Maybe<CafeSubscriptionWhereInput[] | CafeSubscriptionWhereInput>;
}

export interface EnvironmentSurveySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EnvironmentSurveyWhereInput>;
  AND?: Maybe<
    | EnvironmentSurveySubscriptionWhereInput[]
    | EnvironmentSurveySubscriptionWhereInput
  >;
  OR?: Maybe<
    | EnvironmentSurveySubscriptionWhereInput[]
    | EnvironmentSurveySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | EnvironmentSurveySubscriptionWhereInput[]
    | EnvironmentSurveySubscriptionWhereInput
  >;
}

export interface OpeningHoursSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OpeningHoursWhereInput>;
  AND?: Maybe<
    OpeningHoursSubscriptionWhereInput[] | OpeningHoursSubscriptionWhereInput
  >;
  OR?: Maybe<
    OpeningHoursSubscriptionWhereInput[] | OpeningHoursSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OpeningHoursSubscriptionWhereInput[] | OpeningHoursSubscriptionWhereInput
  >;
}

export interface TextReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TextReviewWhereInput>;
  AND?: Maybe<
    TextReviewSubscriptionWhereInput[] | TextReviewSubscriptionWhereInput
  >;
  OR?: Maybe<
    TextReviewSubscriptionWhereInput[] | TextReviewSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TextReviewSubscriptionWhereInput[] | TextReviewSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Busy {
  id: ID_Output;
  cafeId?: ID_Output;
  dayOfTheWeek: String;
  time: String;
  busyness: String;
}

export interface BusyPromise extends Promise<Busy>, Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  dayOfTheWeek: () => Promise<String>;
  time: () => Promise<String>;
  busyness: () => Promise<String>;
}

export interface BusySubscription
  extends Promise<AsyncIterator<Busy>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafe: <T = CafeSubscription>() => T;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  dayOfTheWeek: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  busyness: () => Promise<AsyncIterator<String>>;
}

export interface BusyNullablePromise
  extends Promise<Busy | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  dayOfTheWeek: () => Promise<String>;
  time: () => Promise<String>;
  busyness: () => Promise<String>;
}

export interface Cafe {
  id: ID_Output;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: String;
  createdAt: DateTimeOutput;
}

export interface CafePromise extends Promise<Cafe>, Fragmentable {
  id: () => Promise<ID_Output>;
  cafename: () => Promise<String>;
  address: () => Promise<String>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  franchise: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  openingHours: <T = FragmentableArray<OpeningHours>>(args?: {
    where?: OpeningHoursWhereInput;
    orderBy?: OpeningHoursOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  busy: <T = FragmentableArray<Busy>>(args?: {
    where?: BusyWhereInput;
    orderBy?: BusyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  environmentSurvey: <T = FragmentableArray<EnvironmentSurvey>>(args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  textReview: <T = FragmentableArray<TextReview>>(args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CafeSubscription
  extends Promise<AsyncIterator<Cafe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafename: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  franchise: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  openingHours: <T = Promise<AsyncIterator<OpeningHoursSubscription>>>(args?: {
    where?: OpeningHoursWhereInput;
    orderBy?: OpeningHoursOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  busy: <T = Promise<AsyncIterator<BusySubscription>>>(args?: {
    where?: BusyWhereInput;
    orderBy?: BusyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  environmentSurvey: <
    T = Promise<AsyncIterator<EnvironmentSurveySubscription>>
  >(args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  textReview: <T = Promise<AsyncIterator<TextReviewSubscription>>>(args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CafeNullablePromise
  extends Promise<Cafe | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafename: () => Promise<String>;
  address: () => Promise<String>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  franchise: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  openingHours: <T = FragmentableArray<OpeningHours>>(args?: {
    where?: OpeningHoursWhereInput;
    orderBy?: OpeningHoursOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  busy: <T = FragmentableArray<Busy>>(args?: {
    where?: BusyWhereInput;
    orderBy?: BusyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  environmentSurvey: <T = FragmentableArray<EnvironmentSurvey>>(args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  textReview: <T = FragmentableArray<TextReview>>(args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OpeningHours {
  id: ID_Output;
  cafeId?: ID_Output;
  dayOfTheWeek: String;
  open: String;
  close: String;
}

export interface OpeningHoursPromise
  extends Promise<OpeningHours>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  dayOfTheWeek: () => Promise<String>;
  open: () => Promise<String>;
  close: () => Promise<String>;
}

export interface OpeningHoursSubscription
  extends Promise<AsyncIterator<OpeningHours>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafe: <T = CafeSubscription>() => T;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  dayOfTheWeek: () => Promise<AsyncIterator<String>>;
  open: () => Promise<AsyncIterator<String>>;
  close: () => Promise<AsyncIterator<String>>;
}

export interface OpeningHoursNullablePromise
  extends Promise<OpeningHours | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  dayOfTheWeek: () => Promise<String>;
  open: () => Promise<String>;
  close: () => Promise<String>;
}

export interface EnvironmentSurvey {
  id: ID_Output;
  cafeId?: ID_Output;
  userId?: ID_Output;
  loudness?: String;
  cafeSize?: String;
  plugin?: String;
  createdAt: DateTimeOutput;
}

export interface EnvironmentSurveyPromise
  extends Promise<EnvironmentSurvey>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userId: () => Promise<ID_Output>;
  loudness: () => Promise<String>;
  cafeSize: () => Promise<String>;
  plugin: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EnvironmentSurveySubscription
  extends Promise<AsyncIterator<EnvironmentSurvey>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafe: <T = CafeSubscription>() => T;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  loudness: () => Promise<AsyncIterator<String>>;
  cafeSize: () => Promise<AsyncIterator<String>>;
  plugin: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EnvironmentSurveyNullablePromise
  extends Promise<EnvironmentSurvey | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userId: () => Promise<ID_Output>;
  loudness: () => Promise<String>;
  cafeSize: () => Promise<String>;
  plugin: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  userName?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  environmentSurvey: <T = FragmentableArray<EnvironmentSurvey>>(args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  textReview: <T = FragmentableArray<TextReview>>(args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userName: () => Promise<AsyncIterator<String>>;
  environmentSurvey: <
    T = Promise<AsyncIterator<EnvironmentSurveySubscription>>
  >(args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  textReview: <T = Promise<AsyncIterator<TextReviewSubscription>>>(args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  environmentSurvey: <T = FragmentableArray<EnvironmentSurvey>>(args?: {
    where?: EnvironmentSurveyWhereInput;
    orderBy?: EnvironmentSurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  textReview: <T = FragmentableArray<TextReview>>(args?: {
    where?: TextReviewWhereInput;
    orderBy?: TextReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TextReview {
  id: ID_Output;
  cafeId?: ID_Output;
  userId?: ID_Output;
  review?: String;
  createdAt: DateTimeOutput;
}

export interface TextReviewPromise extends Promise<TextReview>, Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userId: () => Promise<ID_Output>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TextReviewSubscription
  extends Promise<AsyncIterator<TextReview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafe: <T = CafeSubscription>() => T;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TextReviewNullablePromise
  extends Promise<TextReview | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafe: <T = CafePromise>() => T;
  cafeId: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userId: () => Promise<ID_Output>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BusyConnection {
  pageInfo: PageInfo;
  edges: BusyEdge[];
}

export interface BusyConnectionPromise
  extends Promise<BusyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BusyEdge>>() => T;
  aggregate: <T = AggregateBusyPromise>() => T;
}

export interface BusyConnectionSubscription
  extends Promise<AsyncIterator<BusyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BusyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBusySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BusyEdge {
  node: Busy;
  cursor: String;
}

export interface BusyEdgePromise extends Promise<BusyEdge>, Fragmentable {
  node: <T = BusyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BusyEdgeSubscription
  extends Promise<AsyncIterator<BusyEdge>>,
    Fragmentable {
  node: <T = BusySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBusy {
  count: Int;
}

export interface AggregateBusyPromise
  extends Promise<AggregateBusy>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBusySubscription
  extends Promise<AsyncIterator<AggregateBusy>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CafeConnection {
  pageInfo: PageInfo;
  edges: CafeEdge[];
}

export interface CafeConnectionPromise
  extends Promise<CafeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CafeEdge>>() => T;
  aggregate: <T = AggregateCafePromise>() => T;
}

export interface CafeConnectionSubscription
  extends Promise<AsyncIterator<CafeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CafeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCafeSubscription>() => T;
}

export interface CafeEdge {
  node: Cafe;
  cursor: String;
}

export interface CafeEdgePromise extends Promise<CafeEdge>, Fragmentable {
  node: <T = CafePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CafeEdgeSubscription
  extends Promise<AsyncIterator<CafeEdge>>,
    Fragmentable {
  node: <T = CafeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCafe {
  count: Int;
}

export interface AggregateCafePromise
  extends Promise<AggregateCafe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCafeSubscription
  extends Promise<AsyncIterator<AggregateCafe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EnvironmentSurveyConnection {
  pageInfo: PageInfo;
  edges: EnvironmentSurveyEdge[];
}

export interface EnvironmentSurveyConnectionPromise
  extends Promise<EnvironmentSurveyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EnvironmentSurveyEdge>>() => T;
  aggregate: <T = AggregateEnvironmentSurveyPromise>() => T;
}

export interface EnvironmentSurveyConnectionSubscription
  extends Promise<AsyncIterator<EnvironmentSurveyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EnvironmentSurveyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEnvironmentSurveySubscription>() => T;
}

export interface EnvironmentSurveyEdge {
  node: EnvironmentSurvey;
  cursor: String;
}

export interface EnvironmentSurveyEdgePromise
  extends Promise<EnvironmentSurveyEdge>,
    Fragmentable {
  node: <T = EnvironmentSurveyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EnvironmentSurveyEdgeSubscription
  extends Promise<AsyncIterator<EnvironmentSurveyEdge>>,
    Fragmentable {
  node: <T = EnvironmentSurveySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEnvironmentSurvey {
  count: Int;
}

export interface AggregateEnvironmentSurveyPromise
  extends Promise<AggregateEnvironmentSurvey>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEnvironmentSurveySubscription
  extends Promise<AsyncIterator<AggregateEnvironmentSurvey>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OpeningHoursConnection {
  pageInfo: PageInfo;
  edges: OpeningHoursEdge[];
}

export interface OpeningHoursConnectionPromise
  extends Promise<OpeningHoursConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OpeningHoursEdge>>() => T;
  aggregate: <T = AggregateOpeningHoursPromise>() => T;
}

export interface OpeningHoursConnectionSubscription
  extends Promise<AsyncIterator<OpeningHoursConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OpeningHoursEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOpeningHoursSubscription>() => T;
}

export interface OpeningHoursEdge {
  node: OpeningHours;
  cursor: String;
}

export interface OpeningHoursEdgePromise
  extends Promise<OpeningHoursEdge>,
    Fragmentable {
  node: <T = OpeningHoursPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OpeningHoursEdgeSubscription
  extends Promise<AsyncIterator<OpeningHoursEdge>>,
    Fragmentable {
  node: <T = OpeningHoursSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOpeningHours {
  count: Int;
}

export interface AggregateOpeningHoursPromise
  extends Promise<AggregateOpeningHours>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOpeningHoursSubscription
  extends Promise<AsyncIterator<AggregateOpeningHours>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TextReviewConnection {
  pageInfo: PageInfo;
  edges: TextReviewEdge[];
}

export interface TextReviewConnectionPromise
  extends Promise<TextReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TextReviewEdge>>() => T;
  aggregate: <T = AggregateTextReviewPromise>() => T;
}

export interface TextReviewConnectionSubscription
  extends Promise<AsyncIterator<TextReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TextReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTextReviewSubscription>() => T;
}

export interface TextReviewEdge {
  node: TextReview;
  cursor: String;
}

export interface TextReviewEdgePromise
  extends Promise<TextReviewEdge>,
    Fragmentable {
  node: <T = TextReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TextReviewEdgeSubscription
  extends Promise<AsyncIterator<TextReviewEdge>>,
    Fragmentable {
  node: <T = TextReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTextReview {
  count: Int;
}

export interface AggregateTextReviewPromise
  extends Promise<AggregateTextReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTextReviewSubscription
  extends Promise<AsyncIterator<AggregateTextReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BusySubscriptionPayload {
  mutation: MutationType;
  node: Busy;
  updatedFields: String[];
  previousValues: BusyPreviousValues;
}

export interface BusySubscriptionPayloadPromise
  extends Promise<BusySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BusyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BusyPreviousValuesPromise>() => T;
}

export interface BusySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BusySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BusySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BusyPreviousValuesSubscription>() => T;
}

export interface BusyPreviousValues {
  id: ID_Output;
  cafeId?: ID_Output;
  dayOfTheWeek: String;
  time: String;
  busyness: String;
}

export interface BusyPreviousValuesPromise
  extends Promise<BusyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafeId: () => Promise<ID_Output>;
  dayOfTheWeek: () => Promise<String>;
  time: () => Promise<String>;
  busyness: () => Promise<String>;
}

export interface BusyPreviousValuesSubscription
  extends Promise<AsyncIterator<BusyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  dayOfTheWeek: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  busyness: () => Promise<AsyncIterator<String>>;
}

export interface CafeSubscriptionPayload {
  mutation: MutationType;
  node: Cafe;
  updatedFields: String[];
  previousValues: CafePreviousValues;
}

export interface CafeSubscriptionPayloadPromise
  extends Promise<CafeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CafePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CafePreviousValuesPromise>() => T;
}

export interface CafeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CafeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CafeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CafePreviousValuesSubscription>() => T;
}

export interface CafePreviousValues {
  id: ID_Output;
  cafename: String;
  address: String;
  lat: String;
  lng: String;
  franchise?: String;
  createdAt: DateTimeOutput;
}

export interface CafePreviousValuesPromise
  extends Promise<CafePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafename: () => Promise<String>;
  address: () => Promise<String>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  franchise: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CafePreviousValuesSubscription
  extends Promise<AsyncIterator<CafePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafename: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  franchise: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EnvironmentSurveySubscriptionPayload {
  mutation: MutationType;
  node: EnvironmentSurvey;
  updatedFields: String[];
  previousValues: EnvironmentSurveyPreviousValues;
}

export interface EnvironmentSurveySubscriptionPayloadPromise
  extends Promise<EnvironmentSurveySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EnvironmentSurveyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EnvironmentSurveyPreviousValuesPromise>() => T;
}

export interface EnvironmentSurveySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EnvironmentSurveySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EnvironmentSurveySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EnvironmentSurveyPreviousValuesSubscription>() => T;
}

export interface EnvironmentSurveyPreviousValues {
  id: ID_Output;
  cafeId?: ID_Output;
  userId?: ID_Output;
  loudness?: String;
  cafeSize?: String;
  plugin?: String;
  createdAt: DateTimeOutput;
}

export interface EnvironmentSurveyPreviousValuesPromise
  extends Promise<EnvironmentSurveyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafeId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  loudness: () => Promise<String>;
  cafeSize: () => Promise<String>;
  plugin: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EnvironmentSurveyPreviousValuesSubscription
  extends Promise<AsyncIterator<EnvironmentSurveyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  loudness: () => Promise<AsyncIterator<String>>;
  cafeSize: () => Promise<AsyncIterator<String>>;
  plugin: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OpeningHoursSubscriptionPayload {
  mutation: MutationType;
  node: OpeningHours;
  updatedFields: String[];
  previousValues: OpeningHoursPreviousValues;
}

export interface OpeningHoursSubscriptionPayloadPromise
  extends Promise<OpeningHoursSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OpeningHoursPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OpeningHoursPreviousValuesPromise>() => T;
}

export interface OpeningHoursSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OpeningHoursSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OpeningHoursSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OpeningHoursPreviousValuesSubscription>() => T;
}

export interface OpeningHoursPreviousValues {
  id: ID_Output;
  cafeId?: ID_Output;
  dayOfTheWeek: String;
  open: String;
  close: String;
}

export interface OpeningHoursPreviousValuesPromise
  extends Promise<OpeningHoursPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafeId: () => Promise<ID_Output>;
  dayOfTheWeek: () => Promise<String>;
  open: () => Promise<String>;
  close: () => Promise<String>;
}

export interface OpeningHoursPreviousValuesSubscription
  extends Promise<AsyncIterator<OpeningHoursPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  dayOfTheWeek: () => Promise<AsyncIterator<String>>;
  open: () => Promise<AsyncIterator<String>>;
  close: () => Promise<AsyncIterator<String>>;
}

export interface TextReviewSubscriptionPayload {
  mutation: MutationType;
  node: TextReview;
  updatedFields: String[];
  previousValues: TextReviewPreviousValues;
}

export interface TextReviewSubscriptionPayloadPromise
  extends Promise<TextReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TextReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TextReviewPreviousValuesPromise>() => T;
}

export interface TextReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TextReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TextReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TextReviewPreviousValuesSubscription>() => T;
}

export interface TextReviewPreviousValues {
  id: ID_Output;
  cafeId?: ID_Output;
  userId?: ID_Output;
  review?: String;
  createdAt: DateTimeOutput;
}

export interface TextReviewPreviousValuesPromise
  extends Promise<TextReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cafeId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TextReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<TextReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cafeId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  userName?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userName: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userName: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Cafe",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "OpeningHours",
    embedded: false
  },
  {
    name: "Busy",
    embedded: false
  },
  {
    name: "EnvironmentSurvey",
    embedded: false
  },
  {
    name: "TextReview",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
